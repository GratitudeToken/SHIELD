import * as z from 'zod';
export declare const loginAccountParamsV3Parser: z.ZodObject<z.extendShape<{
    email: z.ZodOptional<z.ZodString>;
    verificationCode: z.ZodOptional<z.ZodString>;
}, {
    signer: z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        actor: string;
        permission: string;
    }, {
        actor: string;
        permission: string;
    }>;
    signatures: z.ZodArray<z.ZodString, "many">;
    transaction: z.ZodObject<z.extendShape<{
        expiration: z.ZodString;
        ref_block_num: z.ZodNumber;
        ref_block_prefix: z.ZodNumber;
        max_net_usage_words: z.ZodNumber;
        max_cpu_usage_ms: z.ZodNumber;
        delay_sec: z.ZodNumber;
        context_free_actions: z.ZodArray<z.ZodObject<{
            account: z.ZodString;
            name: z.ZodString;
            authorization: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                actor: string;
                permission: string;
            }, {
                actor: string;
                permission: string;
            }>, "many">;
            data: z.ZodAny;
            hex_data: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            data?: any;
            hex_data?: string | undefined;
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }, {
            data?: any;
            hex_data?: string | undefined;
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }>, "many">;
        transaction_extensions: z.ZodArray<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">>, "many">;
    }, {
        actions: z.ZodArray<z.ZodUnion<[z.ZodObject<{
            account: z.ZodString | z.ZodLiteral<string>;
            name: z.ZodLiteral<string>;
            data: z.ZodObject<z.ZodRawShape, "strip", z.ZodTypeAny, {
                [x: string]: any;
            }, {
                [x: string]: any;
            }>;
            authorization: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                actor: string;
                permission: string;
            }, {
                actor: string;
                permission: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            data: {
                [x: string]: any;
            };
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }, {
            data: {
                [x: string]: any;
            };
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }>, z.ZodObject<{
            account: z.ZodLiteral<"webauthn">;
            name: z.ZodLiteral<"exec">;
            data: z.ZodObject<{
                account: z.ZodString;
                key: z.ZodObject<{
                    key: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
                        modulus: z.ZodString;
                        exponent: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        modulus: string;
                        exponent: string;
                    }, {
                        modulus: string;
                        exponent: string;
                    }>]>, "many">;
                    user_presence: z.ZodNumber;
                    rpid: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                }, {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                }>;
                nonce: z.ZodNumber;
                permissions: z.ZodArray<z.ZodObject<{
                    actor: z.ZodString;
                    permission: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    actor: string;
                    permission: string;
                }, {
                    actor: string;
                    permission: string;
                }>, "many">;
                signature: z.ZodObject<{
                    auth_data: z.ZodString;
                    client_json: z.ZodString;
                    signature: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                }, {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                }>;
                trx: z.ZodObject<z.extendShape<{
                    expiration: z.ZodString;
                    ref_block_num: z.ZodNumber;
                    ref_block_prefix: z.ZodNumber;
                    max_net_usage_words: z.ZodNumber;
                    max_cpu_usage_ms: z.ZodNumber;
                    delay_sec: z.ZodNumber;
                    context_free_actions: z.ZodArray<z.ZodObject<{
                        account: z.ZodString;
                        name: z.ZodString;
                        authorization: z.ZodArray<z.ZodObject<{
                            actor: z.ZodString;
                            permission: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            actor: string;
                            permission: string;
                        }, {
                            actor: string;
                            permission: string;
                        }>, "many">;
                        data: z.ZodAny;
                        hex_data: z.ZodOptional<z.ZodString>;
                    }, "strip", z.ZodTypeAny, {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }, {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }>, "many">;
                    transaction_extensions: z.ZodArray<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">>, "many">;
                }, {
                    actions: z.ZodArray<z.ZodObject<{
                        account: z.ZodString | z.ZodLiteral<string>;
                        name: z.ZodLiteral<string>;
                        data: z.ZodUnion<[z.ZodString, z.ZodObject<z.ZodRawShape, "strip", z.ZodTypeAny, {
                            [x: string]: any;
                        }, {
                            [x: string]: any;
                        }>]>;
                        authorization: z.ZodArray<z.ZodObject<{
                            actor: z.ZodString;
                            permission: z.ZodString;
                        }, "strip", z.ZodTypeAny, {
                            actor: string;
                            permission: string;
                        }, {
                            actor: string;
                            permission: string;
                        }>, "many">;
                    }, "strip", z.ZodTypeAny, {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }, {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }>, "many">;
                }>, "strip", z.ZodTypeAny, {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                }, {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                }>;
            }, "strip", z.ZodTypeAny, {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            }, {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            }>;
            authorization: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                actor: string;
                permission: string;
            }, {
                actor: string;
                permission: string;
            }>, "many">;
        }, "strip", z.ZodTypeAny, {
            data: {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            };
            account: "webauthn";
            name: "exec";
            authorization: {
                actor: string;
                permission: string;
            }[];
        }, {
            data: {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            };
            account: "webauthn";
            name: "exec";
            authorization: {
                actor: string;
                permission: string;
            }[];
        }>]>, "many">;
    }>, "strip", z.ZodTypeAny, {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: {
            data?: any;
            hex_data?: string | undefined;
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
        transaction_extensions: ((string | number)[] | undefined)[];
        actions: ({
            data: {
                [x: string]: any;
            };
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        } | {
            data: {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            };
            account: "webauthn";
            name: "exec";
            authorization: {
                actor: string;
                permission: string;
            }[];
        })[];
    }, {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: {
            data?: any;
            hex_data?: string | undefined;
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
        transaction_extensions: ((string | number)[] | undefined)[];
        actions: ({
            data: {
                [x: string]: any;
            };
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        } | {
            data: {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            };
            account: "webauthn";
            name: "exec";
            authorization: {
                actor: string;
                permission: string;
            }[];
        })[];
    }>;
}>, "strip", z.ZodTypeAny, {
    email?: string | undefined;
    verificationCode?: string | undefined;
    signer: {
        actor: string;
        permission: string;
    };
    signatures: string[];
    transaction: {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: {
            data?: any;
            hex_data?: string | undefined;
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
        transaction_extensions: ((string | number)[] | undefined)[];
        actions: ({
            data: {
                [x: string]: any;
            };
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        } | {
            data: {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            };
            account: "webauthn";
            name: "exec";
            authorization: {
                actor: string;
                permission: string;
            }[];
        })[];
    };
}, {
    email?: string | undefined;
    verificationCode?: string | undefined;
    signer: {
        actor: string;
        permission: string;
    };
    signatures: string[];
    transaction: {
        expiration: string;
        ref_block_num: number;
        ref_block_prefix: number;
        max_net_usage_words: number;
        max_cpu_usage_ms: number;
        delay_sec: number;
        context_free_actions: {
            data?: any;
            hex_data?: string | undefined;
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        }[];
        transaction_extensions: ((string | number)[] | undefined)[];
        actions: ({
            data: {
                [x: string]: any;
            };
            account: string;
            name: string;
            authorization: {
                actor: string;
                permission: string;
            }[];
        } | {
            data: {
                account: string;
                key: {
                    key: (string | {
                        modulus: string;
                        exponent: string;
                    })[];
                    user_presence: number;
                    rpid: string;
                };
                nonce: number;
                permissions: {
                    actor: string;
                    permission: string;
                }[];
                signature: {
                    signature: string;
                    auth_data: string;
                    client_json: string;
                };
                trx: {
                    expiration: string;
                    ref_block_num: number;
                    ref_block_prefix: number;
                    max_net_usage_words: number;
                    max_cpu_usage_ms: number;
                    delay_sec: number;
                    context_free_actions: {
                        data?: any;
                        hex_data?: string | undefined;
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                    transaction_extensions: ((string | number)[] | undefined)[];
                    actions: {
                        data: string | {
                            [x: string]: any;
                        };
                        account: string;
                        name: string;
                        authorization: {
                            actor: string;
                            permission: string;
                        }[];
                    }[];
                };
            };
            account: "webauthn";
            name: "exec";
            authorization: {
                actor: string;
                permission: string;
            }[];
        })[];
    };
}>;
export declare type LoginAccountParamsV3 = z.infer<typeof loginAccountParamsV3Parser>;
