import { ExtendedAsset, ExtendedSymbol } from '@bloks/numbers';
import * as z from 'zod';
export declare const ohlcvParser: z.ZodObject<{
    time: z.ZodNumber;
    open: z.ZodNumber;
    high: z.ZodNumber;
    low: z.ZodNumber;
    close: z.ZodNumber;
    volume: z.ZodNumber;
    volume_bid: z.ZodNumber;
    count: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    time: number;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    volume_bid: number;
    count: number;
}, {
    time: number;
    open: number;
    high: number;
    low: number;
    close: number;
    volume: number;
    volume_bid: number;
    count: number;
}>;
export declare type OHLCV = z.infer<typeof ohlcvParser>;
export declare const getOhlcvParser: z.ZodObject<{
    interval: z.ZodString;
    dateFrom: z.ZodString;
    dateTo: z.ZodString;
    marketId: z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>;
    limit: z.ZodEffects<z.ZodDefault<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>, number, string | number | undefined>;
}, "strip", z.ZodTypeAny, {
    interval: string;
    dateFrom: string;
    dateTo: string;
    marketId: number;
    limit: number;
}, {
    limit?: string | number | undefined;
    interval: string;
    dateFrom: string;
    dateTo: string;
    marketId: string | number;
}>;
export declare type GetOHLCV = z.infer<typeof getOhlcvParser>;
export declare const getOhlcvResponseParser: z.ZodObject<{
    sync: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        time: z.ZodNumber;
        open: z.ZodNumber;
        high: z.ZodNumber;
        low: z.ZodNumber;
        close: z.ZodNumber;
        volume: z.ZodNumber;
        volume_bid: z.ZodNumber;
        count: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        time: number;
        open: number;
        high: number;
        low: number;
        close: number;
        volume: number;
        volume_bid: number;
        count: number;
    }, {
        time: number;
        open: number;
        high: number;
        low: number;
        close: number;
        volume: number;
        volume_bid: number;
        count: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        time: number;
        open: number;
        high: number;
        low: number;
        close: number;
        volume: number;
        volume_bid: number;
        count: number;
    }[];
    sync: number;
}, {
    data: {
        time: number;
        open: number;
        high: number;
        low: number;
        close: number;
        volume: number;
        volume_bid: number;
        count: number;
    }[];
    sync: number;
}>;
export declare type GetOHLCVResponse = z.infer<typeof getOhlcvResponseParser>;
export declare const orderHistoryParser: z.ZodObject<{
    seq: z.ZodNumber;
    block_num: z.ZodNumber;
    block_time: z.ZodString;
    order_id: z.ZodNumber;
    market_id: z.ZodNumber;
    quantity_init: z.ZodOptional<z.ZodNumber>;
    quantity_curr: z.ZodNumber;
    price: z.ZodNumber;
    account_name: z.ZodString;
    order_side: z.ZodNumber;
    order_type: z.ZodNumber;
    trigger_price: z.ZodNumber;
    fill_type: z.ZodNumber;
    status: z.ZodString;
    quantity_change: z.ZodNumber;
    trx_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    quantity_init?: number | undefined;
    status: string;
    seq: number;
    block_num: number;
    block_time: string;
    order_id: number;
    market_id: number;
    quantity_curr: number;
    price: number;
    account_name: string;
    order_side: number;
    order_type: number;
    trigger_price: number;
    fill_type: number;
    quantity_change: number;
    trx_id: string;
}, {
    quantity_init?: number | undefined;
    status: string;
    seq: number;
    block_num: number;
    block_time: string;
    order_id: number;
    market_id: number;
    quantity_curr: number;
    price: number;
    account_name: string;
    order_side: number;
    order_type: number;
    trigger_price: number;
    fill_type: number;
    quantity_change: number;
    trx_id: string;
}>;
export declare type OrderHistory = z.infer<typeof orderHistoryParser>;
export declare const getOrderHistoryParser: z.ZodObject<{
    account: z.ZodString;
    marketId: z.ZodOptional<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>;
    offset: z.ZodDefault<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>;
    limit: z.ZodEffects<z.ZodDefault<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>, number, string | number | undefined>;
}, "strip", z.ZodTypeAny, {
    marketId?: number | undefined;
    limit: number;
    account: string;
    offset: number;
}, {
    marketId?: string | number | undefined;
    limit?: string | number | undefined;
    offset?: string | number | undefined;
    account: string;
}>;
export declare type GetOrderHistory = z.infer<typeof getOrderHistoryParser>;
export declare const getOrderHistoryResponseParser: z.ZodObject<{
    sync: z.ZodNumber;
    count: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        seq: z.ZodNumber;
        block_num: z.ZodNumber;
        block_time: z.ZodString;
        order_id: z.ZodNumber;
        market_id: z.ZodNumber;
        quantity_init: z.ZodOptional<z.ZodNumber>;
        quantity_curr: z.ZodNumber;
        price: z.ZodNumber;
        account_name: z.ZodString;
        order_side: z.ZodNumber;
        order_type: z.ZodNumber;
        trigger_price: z.ZodNumber;
        fill_type: z.ZodNumber;
        status: z.ZodString;
        quantity_change: z.ZodNumber;
        trx_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        quantity_init?: number | undefined;
        status: string;
        seq: number;
        block_num: number;
        block_time: string;
        order_id: number;
        market_id: number;
        quantity_curr: number;
        price: number;
        account_name: string;
        order_side: number;
        order_type: number;
        trigger_price: number;
        fill_type: number;
        quantity_change: number;
        trx_id: string;
    }, {
        quantity_init?: number | undefined;
        status: string;
        seq: number;
        block_num: number;
        block_time: string;
        order_id: number;
        market_id: number;
        quantity_curr: number;
        price: number;
        account_name: string;
        order_side: number;
        order_type: number;
        trigger_price: number;
        fill_type: number;
        quantity_change: number;
        trx_id: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    count: number;
    data: {
        quantity_init?: number | undefined;
        status: string;
        seq: number;
        block_num: number;
        block_time: string;
        order_id: number;
        market_id: number;
        quantity_curr: number;
        price: number;
        account_name: string;
        order_side: number;
        order_type: number;
        trigger_price: number;
        fill_type: number;
        quantity_change: number;
        trx_id: string;
    }[];
    sync: number;
}, {
    count: number;
    data: {
        quantity_init?: number | undefined;
        status: string;
        seq: number;
        block_num: number;
        block_time: string;
        order_id: number;
        market_id: number;
        quantity_curr: number;
        price: number;
        account_name: string;
        order_side: number;
        order_type: number;
        trigger_price: number;
        fill_type: number;
        quantity_change: number;
        trx_id: string;
    }[];
    sync: number;
}>;
export declare type GetOrderHistoryResponse = z.infer<typeof getOrderHistoryResponseParser>;
export declare const depthParser: z.ZodObject<{
    level: z.ZodNumber;
    ask: z.ZodNumber;
    bid: z.ZodNumber;
    count: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    count: number;
    level: number;
    ask: number;
    bid: number;
}, {
    count: number;
    level: number;
    ask: number;
    bid: number;
}>;
export declare type Depth = z.infer<typeof depthParser>;
export declare const getDepthParser: z.ZodObject<{
    marketId: z.ZodString;
    step: z.ZodString;
    limit: z.ZodEffects<z.ZodDefault<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>, number, string | number | undefined>;
}, "strip", z.ZodTypeAny, {
    marketId: string;
    limit: number;
    step: string;
}, {
    limit?: string | number | undefined;
    marketId: string;
    step: string;
}>;
export declare type GetDepth = z.infer<typeof getDepthParser>;
export declare const getDepthResponseParser: z.ZodObject<{
    sync: z.ZodNumber;
    data: z.ZodObject<{
        bids: z.ZodArray<z.ZodObject<{
            level: z.ZodNumber;
            ask: z.ZodNumber;
            bid: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }, {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }>, "many">;
        asks: z.ZodArray<z.ZodObject<{
            level: z.ZodNumber;
            ask: z.ZodNumber;
            bid: z.ZodNumber;
            count: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }, {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        bids: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
        asks: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
    }, {
        bids: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
        asks: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
    }>;
}, "strip", z.ZodTypeAny, {
    data: {
        bids: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
        asks: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
    };
    sync: number;
}, {
    data: {
        bids: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
        asks: {
            count: number;
            level: number;
            ask: number;
            bid: number;
        }[];
    };
    sync: number;
}>;
export declare type GetDepthResponse = z.infer<typeof getDepthResponseParser>;
export declare const dailyParser: z.ZodObject<{
    market_id: z.ZodNumber;
    first: z.ZodNumber;
    last: z.ZodNumber;
    bid: z.ZodNumber;
    ask: z.ZodNumber;
    change_percentage_24hr: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    market_id: number;
    ask: number;
    bid: number;
    first: number;
    last: number;
    change_percentage_24hr: number;
}, {
    market_id: number;
    ask: number;
    bid: number;
    first: number;
    last: number;
    change_percentage_24hr: number;
}>;
export declare type Daily = z.infer<typeof dailyParser>;
export declare const getDailyResponseParser: z.ZodObject<{
    sync: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        market_id: z.ZodNumber;
        first: z.ZodNumber;
        last: z.ZodNumber;
        bid: z.ZodNumber;
        ask: z.ZodNumber;
        change_percentage_24hr: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        market_id: number;
        ask: number;
        bid: number;
        first: number;
        last: number;
        change_percentage_24hr: number;
    }, {
        market_id: number;
        ask: number;
        bid: number;
        first: number;
        last: number;
        change_percentage_24hr: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        market_id: number;
        ask: number;
        bid: number;
        first: number;
        last: number;
        change_percentage_24hr: number;
    }[];
    sync: number;
}, {
    data: {
        market_id: number;
        ask: number;
        bid: number;
        first: number;
        last: number;
        change_percentage_24hr: number;
    }[];
    sync: number;
}>;
export declare type GetDailyResponseParser = z.infer<typeof getDailyResponseParser>;
export declare const tradeParser: z.ZodObject<{
    block_num: z.ZodNumber;
    block_time: z.ZodString;
    trade_id: z.ZodNumber;
    market_id: z.ZodNumber;
    price: z.ZodNumber;
    bid_user: z.ZodString;
    bid_user_order_id: z.ZodNumber;
    bid_total: z.ZodNumber;
    bid_amount: z.ZodNumber;
    bid_fee: z.ZodNumber;
    ask_user: z.ZodString;
    ask_user_order_id: z.ZodNumber;
    ask_total: z.ZodNumber;
    ask_amount: z.ZodNumber;
    ask_fee: z.ZodNumber;
    order_side: z.ZodNumber;
    trx_id: z.ZodString;
}, "strip", z.ZodTypeAny, {
    block_num: number;
    block_time: string;
    market_id: number;
    price: number;
    order_side: number;
    trx_id: string;
    trade_id: number;
    bid_user: string;
    bid_user_order_id: number;
    bid_total: number;
    bid_amount: number;
    bid_fee: number;
    ask_user: string;
    ask_user_order_id: number;
    ask_total: number;
    ask_amount: number;
    ask_fee: number;
}, {
    block_num: number;
    block_time: string;
    market_id: number;
    price: number;
    order_side: number;
    trx_id: string;
    trade_id: number;
    bid_user: string;
    bid_user_order_id: number;
    bid_total: number;
    bid_amount: number;
    bid_fee: number;
    ask_user: string;
    ask_user_order_id: number;
    ask_total: number;
    ask_amount: number;
    ask_fee: number;
}>;
export declare type Trade = z.infer<typeof tradeParser>;
export declare const getTradesParser: z.ZodObject<{
    marketId: z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>;
    offset: z.ZodDefault<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>;
    limit: z.ZodEffects<z.ZodDefault<z.ZodUnion<[z.ZodNumber, z.ZodEffects<z.ZodString, number, string>]>>, number, string | number | undefined>;
}, "strip", z.ZodTypeAny, {
    marketId: number;
    limit: number;
    offset: number;
}, {
    limit?: string | number | undefined;
    offset?: string | number | undefined;
    marketId: string | number;
}>;
export declare type GetTrades = z.infer<typeof getTradesParser>;
export declare const getTradesResponseParser: z.ZodObject<{
    sync: z.ZodNumber;
    data: z.ZodArray<z.ZodObject<{
        block_num: z.ZodNumber;
        block_time: z.ZodString;
        trade_id: z.ZodNumber;
        market_id: z.ZodNumber;
        price: z.ZodNumber;
        bid_user: z.ZodString;
        bid_user_order_id: z.ZodNumber;
        bid_total: z.ZodNumber;
        bid_amount: z.ZodNumber;
        bid_fee: z.ZodNumber;
        ask_user: z.ZodString;
        ask_user_order_id: z.ZodNumber;
        ask_total: z.ZodNumber;
        ask_amount: z.ZodNumber;
        ask_fee: z.ZodNumber;
        order_side: z.ZodNumber;
        trx_id: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        block_num: number;
        block_time: string;
        market_id: number;
        price: number;
        order_side: number;
        trx_id: string;
        trade_id: number;
        bid_user: string;
        bid_user_order_id: number;
        bid_total: number;
        bid_amount: number;
        bid_fee: number;
        ask_user: string;
        ask_user_order_id: number;
        ask_total: number;
        ask_amount: number;
        ask_fee: number;
    }, {
        block_num: number;
        block_time: string;
        market_id: number;
        price: number;
        order_side: number;
        trx_id: string;
        trade_id: number;
        bid_user: string;
        bid_user_order_id: number;
        bid_total: number;
        bid_amount: number;
        bid_fee: number;
        ask_user: string;
        ask_user_order_id: number;
        ask_total: number;
        ask_amount: number;
        ask_fee: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    data: {
        block_num: number;
        block_time: string;
        market_id: number;
        price: number;
        order_side: number;
        trx_id: string;
        trade_id: number;
        bid_user: string;
        bid_user_order_id: number;
        bid_total: number;
        bid_amount: number;
        bid_fee: number;
        ask_user: string;
        ask_user_order_id: number;
        ask_total: number;
        ask_amount: number;
        ask_fee: number;
    }[];
    sync: number;
}, {
    data: {
        block_num: number;
        block_time: string;
        market_id: number;
        price: number;
        order_side: number;
        trx_id: string;
        trade_id: number;
        bid_user: string;
        bid_user_order_id: number;
        bid_total: number;
        bid_amount: number;
        bid_fee: number;
        ask_user: string;
        ask_user_order_id: number;
        ask_total: number;
        ask_amount: number;
        ask_fee: number;
    }[];
    sync: number;
}>;
export declare type GetTradesResponseParser = z.infer<typeof getTradesResponseParser>;
export declare const syncParser: z.ZodObject<{
    sourceid: z.ZodNumber;
    block_num: z.ZodString;
    block_time: z.ZodString;
    irreversible: z.ZodString;
    is_master: z.ZodNumber;
    last_updated: z.ZodString;
}, "strip", z.ZodTypeAny, {
    block_num: string;
    block_time: string;
    sourceid: number;
    irreversible: string;
    is_master: number;
    last_updated: string;
}, {
    block_num: string;
    block_time: string;
    sourceid: number;
    irreversible: string;
    is_master: number;
    last_updated: string;
}>;
export declare type Sync = z.infer<typeof syncParser>;
export declare const getSyncResponseParser: z.ZodObject<{
    dbSecondsBehind: z.ZodNumber;
    chronicleSecondsBehind: z.ZodNumber;
    maxSecondsBehind: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    dbSecondsBehind: number;
    chronicleSecondsBehind: number;
    maxSecondsBehind: number;
}, {
    dbSecondsBehind: number;
    chronicleSecondsBehind: number;
    maxSecondsBehind: number;
}>;
export declare type GetSyncResponse = z.infer<typeof getSyncResponseParser>;
export declare enum orderType {
    ORDERBOOK = 0,
    LIMIT = 1,
    STOPLOSS = 2,
    TAKEPROFIT = 3
}
export declare enum orderSide {
    INVALID = 0,
    BUY = 1,
    SELL = 2
}
export declare enum fillType {
    GTC = 0,
    IOC = 1,
    POST_ONLY = 2
}
export declare enum logStatus {
    CREATE = "create",
    UPDATE = "update",
    TRANSFER = "transfer",
    CANCEL = "cancel",
    DELETE = "delete"
}
export interface CurrentOrder {
    order_id: number;
    market_id: number;
    quantity_init: number;
    quantity_curr: number;
    price: number;
    account_name: string;
    order_side: number;
    order_type: number;
    status: string;
    created_at: string;
    updated_at: string;
}
export interface RawMarket {
    market_id: number;
    order_min: number;
    status_code: number;
    maker_fee: number;
    taker_fee: number;
    bid_token: {
        sym: string;
        contract: string;
    };
    ask_token: {
        quantity: string;
        contract: string;
    };
}
export interface Market {
    market_id: number;
    order_min: number;
    status_code: number;
    maker_fee: number;
    taker_fee: number;
    bid_token: ExtendedSymbol;
    ask_token: ExtendedAsset;
    bid_multiplier: number;
    ask_multiplier: number;
}
export interface DbMarket {
    market_id: number;
    order_min: number;
    status_code: number;
    maker_fee: number;
    taker_fee: number;
    bid_token_c: string;
    bid_token_s: string;
    bid_token_m: number;
    ask_token_c: string;
    ask_token_s: string;
    ask_token_m: number;
    created_at: string;
    updated_at: string;
}
export declare enum ITopics {
    TRADES = "TRADES",
    ORDERS = "ORDERS"
}
export declare const TOPICS: {
    TRADES: {
        topic: ITopics;
    };
    ORDERS: {
        topic: ITopics;
    };
};
