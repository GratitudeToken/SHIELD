import * as z from 'zod';
export declare enum Type {
    RECEIVE = "receive",
    SEND = "send"
}
export declare const depositBodyParser: z.ZodObject<{
    id: z.ZodString;
    type: z.ZodNativeEnum<typeof Type>;
    hash: z.ZodString;
    coin: z.ZodString;
    wallet: z.ZodString;
    network: z.ZodOptional<z.ZodString>;
}, "strip", z.ZodTypeAny, {
    network?: string | undefined;
    id: string;
    type: Type;
    hash: string;
    coin: string;
    wallet: string;
}, {
    network?: string | undefined;
    id: string;
    type: Type;
    hash: string;
    coin: string;
    wallet: string;
}>;
export declare type DepositBody = z.infer<typeof depositBodyParser>;
export declare const transactionParser: z.ZodObject<{
    id: z.ZodString;
    wallet: z.ZodString;
    value: z.ZodNumber;
    valueString: z.ZodString;
    address: z.ZodString;
    type: z.ZodNativeEnum<typeof Type>;
    state: z.ZodString;
    confirmations: z.ZodNumber;
    hash: z.ZodString;
    blockHash: z.ZodNullable<z.ZodOptional<z.ZodString>>;
    blockHeight: z.ZodNullable<z.ZodOptional<z.ZodNumber>>;
}, "strip", z.ZodTypeAny, {
    blockHash?: string | null | undefined;
    blockHeight?: number | null | undefined;
    id: string;
    type: Type;
    value: number;
    hash: string;
    wallet: string;
    valueString: string;
    address: string;
    state: string;
    confirmations: number;
}, {
    blockHash?: string | null | undefined;
    blockHeight?: number | null | undefined;
    id: string;
    type: Type;
    value: number;
    hash: string;
    wallet: string;
    valueString: string;
    address: string;
    state: string;
    confirmations: number;
}>;
export declare type Transaction = z.infer<typeof transactionParser>;
