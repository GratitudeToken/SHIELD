import * as z from 'zod';
export interface CurrencyStat {
    supply: string;
    max_supply: string;
    issuer: string;
}
export interface CurrencyStats {
    [key: string]: CurrencyStat;
}
export declare const rateParser: z.ZodObject<{
    counterCurrency: z.ZodString;
    price: z.ZodNumber;
    priceChangePercent: z.ZodNumber;
    marketCap: z.ZodNumber;
    volume: z.ZodNumber;
    timestamp: z.ZodNumber;
}, "strip", z.ZodTypeAny, {
    counterCurrency: string;
    price: number;
    priceChangePercent: number;
    marketCap: number;
    volume: number;
    timestamp: number;
}, {
    counterCurrency: string;
    price: number;
    priceChangePercent: number;
    marketCap: number;
    volume: number;
    timestamp: number;
}>;
export declare type Rate = z.infer<typeof rateParser>;
export declare const exchangeRateParser: z.ZodObject<{
    contract: z.ZodString;
    symbol: z.ZodString;
    rank: z.ZodNumber;
    rates: z.ZodArray<z.ZodObject<{
        counterCurrency: z.ZodString;
        price: z.ZodNumber;
        priceChangePercent: z.ZodNumber;
        marketCap: z.ZodNumber;
        volume: z.ZodNumber;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}>;
export declare type ExchangeRate = z.infer<typeof exchangeRateParser>;
export declare const exchangeRatesParser: z.ZodArray<z.ZodObject<{
    contract: z.ZodString;
    symbol: z.ZodString;
    rank: z.ZodNumber;
    rates: z.ZodArray<z.ZodObject<{
        counterCurrency: z.ZodString;
        price: z.ZodNumber;
        priceChangePercent: z.ZodNumber;
        marketCap: z.ZodNumber;
        volume: z.ZodNumber;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}>, "many">;
export declare type ExchangeRates = z.infer<typeof exchangeRatesParser>;
export declare const bloksRatesParser: z.ZodArray<z.ZodObject<{
    contract: z.ZodString;
    symbol: z.ZodString;
    rank: z.ZodNumber;
    rates: z.ZodArray<z.ZodObject<{
        counterCurrency: z.ZodString;
        price: z.ZodNumber;
        priceChangePercent: z.ZodNumber;
        marketCap: z.ZodNumber;
        volume: z.ZodNumber;
        timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }, {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}, {
    symbol: string;
    contract: string;
    rank: number;
    rates: {
        counterCurrency: string;
        price: number;
        priceChangePercent: number;
        marketCap: number;
        volume: number;
        timestamp: number;
    }[];
}>, "many">;
export declare type BloksRate = {
    key: string;
    symbol: string;
    account: string;
    chain: string;
    supply: {
        circulating: number;
        max: number;
        precision: number;
        last_update: string;
    };
    metadata: {
        name: string;
        website: string;
        logo: string;
        created_at: string;
        desc: string;
    };
    pairs: [
        {
            id: string;
            pair_base: string;
            pair_quote: string;
            exchange: string;
            quote: {
                price: number;
                volume_base_24h: number;
                volume_quote_24h: number;
                market_cap: number;
                price_usd: number;
                volume_usd_24h: number;
            };
            percentage_daily_volume: number;
        }
    ];
    price: {
        quotes: {
            [key: string]: number;
        };
        usd: number;
        volume_base_24h: number;
        volume_usd_24h: number;
        marketcap_usd: number;
        change_24hr: number;
    };
    rank: number;
    chain_rank: number;
};
export declare type BloksRates = BloksRate[];
