import * as z from 'zod';
export declare const baseActionParser: <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.ZodObject<{
    account: z.ZodString | z.ZodLiteral<string>;
    name: z.ZodLiteral<string>;
    data: z.ZodObject<T, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; }>;
    authorization: z.ZodArray<z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        actor: string;
        permission: string;
    }, {
        actor: string;
        permission: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>]: z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>[k_1_1]; }, { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>]: z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>[k_3_1]; }>;
export declare const baseActionSerializedParser: <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.ZodObject<{
    account: z.ZodString | z.ZodLiteral<string>;
    name: z.ZodLiteral<string>;
    data: z.ZodUnion<[z.ZodString, z.ZodObject<T, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; }>]>;
    authorization: z.ZodArray<z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        actor: string;
        permission: string;
    }, {
        actor: string;
        permission: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>]: z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>[k_1_1]; }, { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>]: z.objectUtil.addQuestionMarks<{
    account: string;
    name: string;
    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
    authorization: {
        actor: string;
        permission: string;
    }[];
}>[k_3_1]; }>;
export declare const webauthActionParser: <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.ZodObject<{
    account: z.ZodLiteral<"webauthn">;
    name: z.ZodLiteral<"exec">;
    data: z.ZodObject<{
        account: z.ZodString;
        key: z.ZodObject<{
            key: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
                modulus: z.ZodString;
                exponent: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                modulus: string;
                exponent: string;
            }, {
                modulus: string;
                exponent: string;
            }>]>, "many">;
            user_presence: z.ZodNumber;
            rpid: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            key: (string | {
                modulus: string;
                exponent: string;
            })[];
            user_presence: number;
            rpid: string;
        }, {
            key: (string | {
                modulus: string;
                exponent: string;
            })[];
            user_presence: number;
            rpid: string;
        }>;
        nonce: z.ZodNumber;
        permissions: z.ZodArray<z.ZodObject<{
            actor: z.ZodString;
            permission: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            actor: string;
            permission: string;
        }, {
            actor: string;
            permission: string;
        }>, "many">;
        signature: z.ZodObject<{
            auth_data: z.ZodString;
            client_json: z.ZodString;
            signature: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            signature: string;
            auth_data: string;
            client_json: string;
        }, {
            signature: string;
            auth_data: string;
            client_json: string;
        }>;
        trx: z.ZodObject<z.extendShape<{
            expiration: z.ZodString;
            ref_block_num: z.ZodNumber;
            ref_block_prefix: z.ZodNumber;
            max_net_usage_words: z.ZodNumber;
            max_cpu_usage_ms: z.ZodNumber;
            delay_sec: z.ZodNumber;
            context_free_actions: z.ZodArray<z.ZodObject<{
                account: z.ZodString;
                name: z.ZodString;
                authorization: z.ZodArray<z.ZodObject<{
                    actor: z.ZodString;
                    permission: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    actor: string;
                    permission: string;
                }, {
                    actor: string;
                    permission: string;
                }>, "many">;
                data: z.ZodAny;
                hex_data: z.ZodOptional<z.ZodString>;
            }, "strip", z.ZodTypeAny, {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }, {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>, "many">;
            transaction_extensions: z.ZodArray<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">>, "many">;
        }, {
            actions: z.ZodArray<z.ZodObject<{
                account: z.ZodString | z.ZodLiteral<string>;
                name: z.ZodLiteral<string>;
                data: z.ZodUnion<[z.ZodString, z.ZodObject<T, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; }>]>;
                authorization: z.ZodArray<z.ZodObject<{
                    actor: z.ZodString;
                    permission: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    actor: string;
                    permission: string;
                }, {
                    actor: string;
                    permission: string;
                }>, "many">;
            }, "strip", z.ZodTypeAny, { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_1_1]; }, { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_3_1]; }>, "many">;
        }>, "strip", z.ZodTypeAny, {
            expiration: string;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
            context_free_actions: {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }[];
            transaction_extensions: ((string | number)[] | undefined)[];
            actions: { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_1_1]; }[];
        }, {
            expiration: string;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
            context_free_actions: {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }[];
            transaction_extensions: ((string | number)[] | undefined)[];
            actions: { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_3_1]; }[];
        }>;
    }, "strip", z.ZodTypeAny, {
        account: string;
        key: {
            key: (string | {
                modulus: string;
                exponent: string;
            })[];
            user_presence: number;
            rpid: string;
        };
        nonce: number;
        permissions: {
            actor: string;
            permission: string;
        }[];
        signature: {
            signature: string;
            auth_data: string;
            client_json: string;
        };
        trx: {
            expiration: string;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
            context_free_actions: {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }[];
            transaction_extensions: ((string | number)[] | undefined)[];
            actions: { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_1_1]; }[];
        };
    }, {
        account: string;
        key: {
            key: (string | {
                modulus: string;
                exponent: string;
            })[];
            user_presence: number;
            rpid: string;
        };
        nonce: number;
        permissions: {
            actor: string;
            permission: string;
        }[];
        signature: {
            signature: string;
            auth_data: string;
            client_json: string;
        };
        trx: {
            expiration: string;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
            context_free_actions: {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }[];
            transaction_extensions: ((string | number)[] | undefined)[];
            actions: { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_3_1]; }[];
        };
    }>;
    authorization: z.ZodArray<z.ZodObject<{
        actor: z.ZodString;
        permission: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        actor: string;
        permission: string;
    }, {
        actor: string;
        permission: string;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    account: "webauthn";
    name: "exec";
    authorization: {
        actor: string;
        permission: string;
    }[];
    data: {
        account: string;
        key: {
            key: (string | {
                modulus: string;
                exponent: string;
            })[];
            user_presence: number;
            rpid: string;
        };
        nonce: number;
        permissions: {
            actor: string;
            permission: string;
        }[];
        signature: {
            signature: string;
            auth_data: string;
            client_json: string;
        };
        trx: {
            expiration: string;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
            context_free_actions: {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }[];
            transaction_extensions: ((string | number)[] | undefined)[];
            actions: { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_1_1]; }[];
        };
    };
}, {
    account: "webauthn";
    name: "exec";
    authorization: {
        actor: string;
        permission: string;
    }[];
    data: {
        account: string;
        key: {
            key: (string | {
                modulus: string;
                exponent: string;
            })[];
            user_presence: number;
            rpid: string;
        };
        nonce: number;
        permissions: {
            actor: string;
            permission: string;
        }[];
        signature: {
            signature: string;
            auth_data: string;
            client_json: string;
        };
        trx: {
            expiration: string;
            ref_block_num: number;
            ref_block_prefix: number;
            max_net_usage_words: number;
            max_cpu_usage_ms: number;
            delay_sec: number;
            context_free_actions: {
                data?: any;
                hex_data?: string | undefined;
                account: string;
                name: string;
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }[];
            transaction_extensions: ((string | number)[] | undefined)[];
            actions: { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>]: z.objectUtil.addQuestionMarks<{
                account: string;
                name: string;
                data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                authorization: {
                    actor: string;
                    permission: string;
                }[];
            }>[k_3_1]; }[];
        };
    };
}>;
export declare const singleActionTransactionParser: <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.ZodObject<z.extendShape<{
    expiration: z.ZodString;
    ref_block_num: z.ZodNumber;
    ref_block_prefix: z.ZodNumber;
    max_net_usage_words: z.ZodNumber;
    max_cpu_usage_ms: z.ZodNumber;
    delay_sec: z.ZodNumber;
    context_free_actions: z.ZodArray<z.ZodObject<{
        account: z.ZodString;
        name: z.ZodString;
        authorization: z.ZodArray<z.ZodObject<{
            actor: z.ZodString;
            permission: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            actor: string;
            permission: string;
        }, {
            actor: string;
            permission: string;
        }>, "many">;
        data: z.ZodAny;
        hex_data: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        data?: any;
        hex_data?: string | undefined;
        account: string;
        name: string;
        authorization: {
            actor: string;
            permission: string;
        }[];
    }, {
        data?: any;
        hex_data?: string | undefined;
        account: string;
        name: string;
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>, "many">;
    transaction_extensions: z.ZodArray<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">>, "many">;
}, {
    actions: z.ZodArray<z.ZodUnion<[z.ZodObject<{
        account: z.ZodString | z.ZodLiteral<string>;
        name: z.ZodLiteral<string>;
        data: z.ZodObject<T, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; }>;
        authorization: z.ZodArray<z.ZodObject<{
            actor: z.ZodString;
            permission: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            actor: string;
            permission: string;
        }, {
            actor: string;
            permission: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, { [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>]: z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>[k_1_1]; }, { [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>]: z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>[k_3_1]; }>, z.ZodObject<{
        account: z.ZodLiteral<"webauthn">;
        name: z.ZodLiteral<"exec">;
        data: z.ZodObject<{
            account: z.ZodString;
            key: z.ZodObject<{
                key: z.ZodArray<z.ZodUnion<[z.ZodString, z.ZodObject<{
                    modulus: z.ZodString;
                    exponent: z.ZodString;
                }, "strip", z.ZodTypeAny, {
                    modulus: string;
                    exponent: string;
                }, {
                    modulus: string;
                    exponent: string;
                }>]>, "many">;
                user_presence: z.ZodNumber;
                rpid: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            }, {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            }>;
            nonce: z.ZodNumber;
            permissions: z.ZodArray<z.ZodObject<{
                actor: z.ZodString;
                permission: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                actor: string;
                permission: string;
            }, {
                actor: string;
                permission: string;
            }>, "many">;
            signature: z.ZodObject<{
                auth_data: z.ZodString;
                client_json: z.ZodString;
                signature: z.ZodString;
            }, "strip", z.ZodTypeAny, {
                signature: string;
                auth_data: string;
                client_json: string;
            }, {
                signature: string;
                auth_data: string;
                client_json: string;
            }>;
            trx: z.ZodObject<z.extendShape<{
                expiration: z.ZodString;
                ref_block_num: z.ZodNumber;
                ref_block_prefix: z.ZodNumber;
                max_net_usage_words: z.ZodNumber;
                max_cpu_usage_ms: z.ZodNumber;
                delay_sec: z.ZodNumber;
                context_free_actions: z.ZodArray<z.ZodObject<{
                    account: z.ZodString;
                    name: z.ZodString;
                    authorization: z.ZodArray<z.ZodObject<{
                        actor: z.ZodString;
                        permission: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        actor: string;
                        permission: string;
                    }, {
                        actor: string;
                        permission: string;
                    }>, "many">;
                    data: z.ZodAny;
                    hex_data: z.ZodOptional<z.ZodString>;
                }, "strip", z.ZodTypeAny, {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }, {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>, "many">;
                transaction_extensions: z.ZodArray<z.ZodOptional<z.ZodArray<z.ZodUnion<[z.ZodNumber, z.ZodString]>, "many">>, "many">;
            }, {
                actions: z.ZodArray<z.ZodObject<{
                    account: z.ZodString | z.ZodLiteral<string>;
                    name: z.ZodLiteral<string>;
                    data: z.ZodUnion<[z.ZodString, z.ZodObject<T, "strip", z.ZodTypeAny, { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; }, { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; }>]>;
                    authorization: z.ZodArray<z.ZodObject<{
                        actor: z.ZodString;
                        permission: z.ZodString;
                    }, "strip", z.ZodTypeAny, {
                        actor: string;
                        permission: string;
                    }, {
                        actor: string;
                        permission: string;
                    }>, "many">;
                }, "strip", z.ZodTypeAny, { [k_1_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_1_2]; }, { [k_3_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_3_2]; }>, "many">;
            }>, "strip", z.ZodTypeAny, {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_1_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_1_2]; }[];
            }, {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_3_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_3_2]; }[];
            }>;
        }, "strip", z.ZodTypeAny, {
            account: string;
            key: {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            };
            nonce: number;
            permissions: {
                actor: string;
                permission: string;
            }[];
            signature: {
                signature: string;
                auth_data: string;
                client_json: string;
            };
            trx: {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_1_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_1_2]; }[];
            };
        }, {
            account: string;
            key: {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            };
            nonce: number;
            permissions: {
                actor: string;
                permission: string;
            }[];
            signature: {
                signature: string;
                auth_data: string;
                client_json: string;
            };
            trx: {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_3_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_3_2]; }[];
            };
        }>;
        authorization: z.ZodArray<z.ZodObject<{
            actor: z.ZodString;
            permission: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            actor: string;
            permission: string;
        }, {
            actor: string;
            permission: string;
        }>, "many">;
    }, "strip", z.ZodTypeAny, {
        account: "webauthn";
        name: "exec";
        authorization: {
            actor: string;
            permission: string;
        }[];
        data: {
            account: string;
            key: {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            };
            nonce: number;
            permissions: {
                actor: string;
                permission: string;
            }[];
            signature: {
                signature: string;
                auth_data: string;
                client_json: string;
            };
            trx: {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_1_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_1_2]; }[];
            };
        };
    }, {
        account: "webauthn";
        name: "exec";
        authorization: {
            actor: string;
            permission: string;
        }[];
        data: {
            account: string;
            key: {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            };
            nonce: number;
            permissions: {
                actor: string;
                permission: string;
            }[];
            signature: {
                signature: string;
                auth_data: string;
                client_json: string;
            };
            trx: {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_3_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_3_2]; }[];
            };
        };
    }>]>, "many">;
}>, "strip", z.ZodTypeAny, {
    expiration: string;
    ref_block_num: number;
    ref_block_prefix: number;
    max_net_usage_words: number;
    max_cpu_usage_ms: number;
    delay_sec: number;
    context_free_actions: {
        data?: any;
        hex_data?: string | undefined;
        account: string;
        name: string;
        authorization: {
            actor: string;
            permission: string;
        }[];
    }[];
    transaction_extensions: ((string | number)[] | undefined)[];
    actions: ({ [k_1_1 in keyof z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>]: z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>[k_1_1]; } | {
        account: "webauthn";
        name: "exec";
        authorization: {
            actor: string;
            permission: string;
        }[];
        data: {
            account: string;
            key: {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            };
            nonce: number;
            permissions: {
                actor: string;
                permission: string;
            }[];
            signature: {
                signature: string;
                auth_data: string;
                client_json: string;
            };
            trx: {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_1_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_1 in keyof z.objectUtil.addQuestionMarks<{ [k in keyof T]: T[k]["_output"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_output"]; }>[k_1]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_1_2]; }[];
            };
        };
    })[];
}, {
    expiration: string;
    ref_block_num: number;
    ref_block_prefix: number;
    max_net_usage_words: number;
    max_cpu_usage_ms: number;
    delay_sec: number;
    context_free_actions: {
        data?: any;
        hex_data?: string | undefined;
        account: string;
        name: string;
        authorization: {
            actor: string;
            permission: string;
        }[];
    }[];
    transaction_extensions: ((string | number)[] | undefined)[];
    actions: ({ [k_3_1 in keyof z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>]: z.objectUtil.addQuestionMarks<{
        account: string;
        name: string;
        data: { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
        authorization: {
            actor: string;
            permission: string;
        }[];
    }>[k_3_1]; } | {
        account: "webauthn";
        name: "exec";
        authorization: {
            actor: string;
            permission: string;
        }[];
        data: {
            account: string;
            key: {
                key: (string | {
                    modulus: string;
                    exponent: string;
                })[];
                user_presence: number;
                rpid: string;
            };
            nonce: number;
            permissions: {
                actor: string;
                permission: string;
            }[];
            signature: {
                signature: string;
                auth_data: string;
                client_json: string;
            };
            trx: {
                expiration: string;
                ref_block_num: number;
                ref_block_prefix: number;
                max_net_usage_words: number;
                max_cpu_usage_ms: number;
                delay_sec: number;
                context_free_actions: {
                    data?: any;
                    hex_data?: string | undefined;
                    account: string;
                    name: string;
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }[];
                transaction_extensions: ((string | number)[] | undefined)[];
                actions: { [k_3_2 in keyof z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>]: z.objectUtil.addQuestionMarks<{
                    account: string;
                    name: string;
                    data: string | { [k_3 in keyof z.objectUtil.addQuestionMarks<{ [k_2 in keyof T]: T[k_2]["_input"]; }>]: z.objectUtil.addQuestionMarks<{ [k_2_1 in keyof T]: T[k_2_1]["_input"]; }>[k_3]; };
                    authorization: {
                        actor: string;
                        permission: string;
                    }[];
                }>[k_3_2]; }[];
            };
        };
    })[];
}>;
