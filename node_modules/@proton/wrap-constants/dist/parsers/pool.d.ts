import { Coin } from "../coins";
import { ExtendedAsset } from '@bloks/numbers';
import { INode } from "../graph";
export interface RawPool {
    lt_symbol: string;
    creator: string;
    memo: string;
    pool1: {
        quantity: string;
        contract: string;
    };
    pool2: {
        quantity: string;
        contract: string;
    };
    hash: string;
    fee: {
        exchange_fee: number;
        add_liquidity_fee: number;
        remove_liquidity_fee: number;
    };
    active: boolean;
    amplifier: number;
}
export interface Pool extends Omit<RawPool, 'pool1' | 'pool2'> {
    lt_symbol: string;
    creator: string;
    memo: string;
    pool1: ExtendedTokenWithRate;
    pool2: ExtendedTokenWithRate;
    hash: string;
    fee: {
        exchange_fee: number;
        add_liquidity_fee: number;
        remove_liquidity_fee: number;
    };
    liquidityUsd: number;
    liquidityApr: number;
}
export declare type ExtendedToken = Coin & ExtendedAsset & {
    key: string;
};
export declare type ExtendedTokenWithRate = ExtendedToken & {
    rate: number;
};
export declare type PoolTable = {
    pool1: ExtendedTokenWithRate;
    pool2: ExtendedTokenWithRate;
    path: INode<Pool>[];
    shortestPath: INode<Pool>[];
    getPathString: () => string;
} | undefined;
