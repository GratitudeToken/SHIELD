'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var z = require('zod');
var cloneDeep = _interopDefault(require('lodash.clonedeep'));
var bignumber_js = require('bignumber.js');

var _similarChains, _explorerLinkByChain;

(function (Chains) {
  Chains["BitcoinMainnet"] = "Bitcoin";
  Chains["BitcoinTestnet"] = "Bitcoin (Testnet)";
  Chains["EthereumMainnet"] = "Ethereum";
  Chains["EthereumRopsten"] = "Ethereum (Ropsten)";
  Chains["LitecoinMainnet"] = "Litecoin";
  Chains["LitecoinTestnet"] = "Litecoin (Testnet)";
  Chains["BitcoinCashMainnet"] = "Bitcoin Cash";
  Chains["BitcoinCashTestnet"] = "Bitcoin Cash (Testnet)";
  Chains["StellarMainnet"] = "Stellar";
  Chains["StellarTestnet"] = "Stellar (Testnet)";
  Chains["ProtonMainnet"] = "Proton";
  Chains["ProtonTestnet"] = "Proton (Testnet)";
  Chains["PolkadotMainnet"] = "Polkadot";
  Chains["BinanceBEP2"] = "Binance (BEP2)";
  Chains["BinanceBEP20"] = "Binance (BEP20)";
  Chains["EosMainnet"] = "EOS";
  Chains["EosTestnet"] = "EOS (Jungle Testnet)";
  Chains["HederaMainnet"] = "Hedera (Mainnet)";
  Chains["HederaTestnet"] = "Hedera (Testnet)";
  Chains["DogeMainnet"] = "Dogecoin";
  Chains["CardanoMainnet"] = "Cardano";
  Chains["AvalancheXChain"] = "Avalanche X-Chain";
  Chains["AvalancheCChain"] = "Avalanche C-Chain";
  Chains["PolygonMainnet"] = "Polygon";
  Chains["TerraMainnet"] = "Terra";
  Chains["RippleMainnet"] = "Ripple";
  Chains["SolanaMainnet"] = "Solana";
  Chains["MetalXTestnet"] = "Metal X-Chain (Testnet)";
  Chains["MetalCTestnet"] = "Metal C-Chain (Testnet)";
  Chains["MetalCMainnet"] = "Metal C-Chain";
})(exports.Chains || (exports.Chains = {}));

(function (Networks) {
  Networks["Mainnet"] = "mainnet";
  Networks["Testnet"] = "testnet";
  Networks["Ropsten"] = "ropsten";
  Networks["ERC20"] = "erc20";
  Networks["BEP20"] = "bep20";
  Networks["XLM"] = "xlm";
  Networks["AVM"] = "avm";
  Networks["EVM"] = "evm";
})(exports.Networks || (exports.Networks = {}));

var similarChains = (_similarChains = {}, _similarChains[exports.Chains.EthereumMainnet] = [exports.Chains.BinanceBEP20], _similarChains[exports.Chains.BinanceBEP20] = [exports.Chains.EthereumMainnet], _similarChains);

(function (Providers) {
  Providers["FIREBLOCKS"] = "fireblocks";
  Providers["METAL"] = "metal";
})(exports.Providers || (exports.Providers = {}));

var explorerLinkByChain = (_explorerLinkByChain = {}, _explorerLinkByChain[exports.Chains.BitcoinMainnet] = function (txid) {
  return "https://blockchain.com/btc/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.BitcoinTestnet] = function (txid) {
  return "https://blockstream.info/testnet/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.EthereumMainnet] = function (txid) {
  return "https://etherscan.io/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.EthereumRopsten] = function (txid) {
  return "https://ropsten.etherscan.io/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.LitecoinMainnet] = function (txid) {
  return "https://blockchair.com/litecoin/transaction/" + txid;
}, _explorerLinkByChain[exports.Chains.LitecoinTestnet] = function (txid) {
  return "https://blockexplorer.one/litecoin/testnet/blockHash/" + txid;
}, _explorerLinkByChain[exports.Chains.BitcoinCashMainnet] = function (txid) {
  return "https://blockchair.com/bitcoin-cash/transaction/" + txid;
}, _explorerLinkByChain[exports.Chains.BitcoinCashTestnet] = function (txid) {
  return "https://blockexplorer.one/bitcoin-cash/testnet/blockHash/" + txid;
}, _explorerLinkByChain[exports.Chains.StellarMainnet] = function (txid) {
  return "https://blockchair.com/stellar/transaction/" + txid;
}, _explorerLinkByChain[exports.Chains.StellarTestnet] = function (txid) {
  return "https://testnet.steexp.com/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.ProtonMainnet] = function (txid, traces) {
  return "https://proton.bloks.io/transaction/" + txid + (traces ? '?tab=traces' : '');
}, _explorerLinkByChain[exports.Chains.ProtonTestnet] = function (txid, traces) {
  return "https://proton-test.bloks.io/transaction/" + txid + (traces ? '?tab=traces' : '');
}, _explorerLinkByChain[exports.Chains.PolkadotMainnet] = function (txid) {
  return "https://polkadot.subscan.io/extrinsic/" + txid;
}, _explorerLinkByChain[exports.Chains.BinanceBEP2] = function (txid) {
  return "https://binance.mintscan.io/txs/" + txid;
}, _explorerLinkByChain[exports.Chains.BinanceBEP20] = function (txid) {
  return "https://bscscan.com/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.EosMainnet] = function (txid) {
  return "https://bloks.io/transaction/" + txid;
}, _explorerLinkByChain[exports.Chains.EosTestnet] = function (txid) {
  return "https://jungle.bloks.io/transaction/" + txid;
}, _explorerLinkByChain[exports.Chains.HederaMainnet] = function (txid) {
  return "https://app.dragonglass.me/transactions/" + txid;
}, _explorerLinkByChain[exports.Chains.HederaTestnet] = function (txid) {
  return "https://testnet.dragonglass.me/transactions/" + txid;
}, _explorerLinkByChain[exports.Chains.DogeMainnet] = function (txid) {
  return "https://blockchair.com/dogecoin/transaction/" + txid;
}, _explorerLinkByChain[exports.Chains.CardanoMainnet] = function (txid) {
  return "https://explorer.cardano.org/en/transaction?id=" + txid;
}, _explorerLinkByChain[exports.Chains.AvalancheXChain] = function (txid) {
  return "https://avascan.info/blockchain/x/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.AvalancheCChain] = function (txid) {
  return "https://snowtrace.io/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.PolygonMainnet] = function (txid) {
  return "https://polygonscan.com/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.TerraMainnet] = function (txid) {
  return "https://terra.stake.id/?#/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.RippleMainnet] = function (txid) {
  return "https://xrpscan.com/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.SolanaMainnet] = function (txid) {
  return "https://explorer.solana.com/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.MetalXTestnet] = function (txid) {
  return "https://metalscan.io/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.MetalCTestnet] = function (txid) {
  return "https://tahoe.metaltrace.io/tx/" + txid;
}, _explorerLinkByChain[exports.Chains.MetalCMainnet] = function (txid) {
  return "https://metalscan.io/tx/" + txid;
}, _explorerLinkByChain);
var protonExplorerTxUrl = function protonExplorerTxUrl(chain, txId, traces) {
  return chain === 'proton' ? explorerLinkByChain[exports.Chains.ProtonMainnet](txId, traces) : explorerLinkByChain[exports.Chains.ProtonTestnet](txId, traces);
}; // Initialize.

var initializeCoins = function initializeCoins(protonChain) {
  var IS_MAINNET = protonChain === 'proton';
  var IS_TESTNET = protonChain === 'proton-test';
  var coins = [{
    allowSwap: true,
    allowBridge: IS_MAINNET,
    allowLend: true,
    allowBorrow: true,
    name: 'Proton',
    coin: 'XPR',
    xtokenSymbol: 'XPR',
    xtokenPrecision: 4,
    xtokenContract: 'eosio.token',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'XPR-ERC20',
      symbol: 'XPR',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 4,
      contract: '0xD7EFB00D12C2C13131FD319336FDF952525DA2AF',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }, {
      wallet: 'XPR-BEP20',
      symbol: 'XPR',
      chain: exports.Chains.BinanceBEP20,
      network: exports.Networks.BEP20,
      precision: 4,
      contract: '0x5DE3939B2F811A61D830E6F52D13B066881412AB',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/eosio-tokenXPR.png',
    coingeckoId: 'proton'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: true,
    allowBorrow: true,
    name: 'USD Coin',
    coin: 'USDC',
    xtokenSymbol: 'XUSDC',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'USDC',
      symbol: 'USDC',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 6,
      contract: '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }, {
      wallet: 'USDC-BEP20',
      symbol: 'USDC',
      chain: exports.Chains.BinanceBEP20,
      network: exports.Networks.BEP20,
      precision: 18,
      contract: '0x8AC76A51CC950D9822D68B83FE1AD97B32CD580D',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }, {
      wallet: 'USDC-XLM',
      symbol: 'USDC',
      chain: exports.Chains.StellarMainnet,
      network: exports.Networks.XLM,
      precision: 7,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : [], IS_TESTNET ? [{
      wallet: 'USDC',
      symbol: 'USDC',
      chain: exports.Chains.EthereumRopsten,
      network: exports.Networks.Ropsten,
      precision: 6,
      contract: '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }, {
      wallet: 'USDC-XLM',
      symbol: 'USDC',
      chain: exports.Chains.StellarTestnet,
      network: exports.Networks.XLM,
      precision: 7,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXUSDC.png',
    coingeckoId: 'usd-coin'
  }, {
    allowSwap: true,
    allowBridge: IS_MAINNET,
    allowLend: true,
    allowBorrow: true,
    name: 'Metal DAO',
    coin: 'MTL',
    xtokenSymbol: 'XMT',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'MTL',
      symbol: 'MTL',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 8,
      contract: '0xF433089366899D83A9F26A773D59EC7ECF30355E',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXMT.png',
    coingeckoId: 'metal'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Metal Blockchain',
    coin: 'METAL',
    xtokenSymbol: 'METAL',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_TESTNET ? [{
      wallet: 'METAL',
      symbol: 'METAL',
      chain: exports.Chains.MetalCTestnet,
      network: exports.Networks.EVM,
      precision: 18,
      contract: '',
      provider: exports.Providers.METAL,
      hasWithdrawMemo: false
    }] : [], IS_MAINNET ? [{
      wallet: 'METAL',
      symbol: 'METAL',
      chain: exports.Chains.MetalCMainnet,
      network: exports.Networks.EVM,
      precision: 18,
      contract: '',
      provider: exports.Providers.METAL,
      hasWithdrawMemo: false
    }, {
      wallet: 'METAL',
      symbol: 'METAL',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/metal-chain.png',
    coingeckoId: 'metal-blockchain'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: true,
    allowBorrow: true,
    name: 'Bitcoin',
    coin: 'BTC',
    xtokenSymbol: 'XBTC',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BTC',
      symbol: 'BTC',
      chain: exports.Chains.BitcoinMainnet,
      network: exports.Networks.Mainnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'BTC',
      symbol: 'BTC',
      chain: exports.Chains.BitcoinTestnet,
      network: exports.Networks.Testnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXBTC.png',
    coingeckoId: 'bitcoin'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: true,
    allowBorrow: true,
    name: 'Ethereum',
    coin: 'ETH',
    xtokenSymbol: 'XETH',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'ETH',
      symbol: 'ETH',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.Mainnet,
      precision: 18,
      contract: '0x0000000000000000000000000000000000000000',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'ETH',
      symbol: 'ETH',
      chain: exports.Chains.EthereumRopsten,
      network: exports.Networks.Ropsten,
      precision: 18,
      contract: '0x0000000000000000000000000000000000000000',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXETH.png',
    coingeckoId: 'ethereum'
  }, {
    allowSwap: true,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Loan',
    coin: 'LOAN',
    xtokenSymbol: 'LOAN',
    xtokenPrecision: 4,
    xtokenContract: 'loan.token',
    wallets: [],
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/loan.png',
    coingeckoId: 'proton-loan'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Tether',
    coin: 'USDT',
    xtokenSymbol: 'XUSDT',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'USDT',
      symbol: 'USDT',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 6,
      contract: '0xDAC17F958D2EE523A2206206994597C13D831EC7',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_MAINNET ? [{
      wallet: 'USDT-BEP20',
      symbol: 'USDT',
      chain: exports.Chains.BinanceBEP20,
      network: exports.Networks.BEP20,
      precision: 18,
      contract: '0x55d398326f99059fF775485246999027B3197955',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'USDT',
      symbol: 'USDT',
      chain: exports.Chains.EthereumRopsten,
      network: exports.Networks.Ropsten,
      precision: 6,
      contract: '0xDAC17F958D2EE523A2206206994597C13D831EC7',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXUSDT.png',
    coingeckoId: 'tether'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'TrueUSD',
    coin: 'TUSD',
    xtokenSymbol: 'XTUSD',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'TUSD',
      symbol: 'TUSD',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '0x0000000000085D4780B73119B644AE5ECD22B376',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXTUSD.png',
    coingeckoId: 'true-usd'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Paxos Dollar',
    coin: 'PAX',
    xtokenSymbol: 'XPAX',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'PAX',
      symbol: 'PAX',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '0x8E870D67F660D95D5BE530380D0EC0BD388289E1',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXPAX.png',
    coingeckoId: 'paxos-standard'
  }, {
    allowSwap: false,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Paxos Gold',
    coin: 'PAXG',
    xtokenSymbol: 'XPAXG',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'PAXG',
      symbol: 'PAXG',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '0x45804880DE22913DAFE09F4980848ECE6ECBAF78',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'PAXG',
      symbol: 'PAXG',
      chain: exports.Chains.EthereumRopsten,
      network: exports.Networks.Ropsten,
      precision: 18,
      contract: '0x45804880DE22913DAFE09F4980848ECE6ECBAF78',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXPAXG.png',
    coingeckoId: 'pax-gold'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Storex',
    coin: 'STRX',
    xtokenSymbol: 'STRX',
    xtokenPrecision: 4,
    xtokenContract: 'storex',
    wallets: [],
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/strx.png',
    coingeckoId: ''
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Mint',
    coin: 'MINT',
    xtokenSymbol: 'MINT',
    xtokenPrecision: 4,
    xtokenContract: 'protonmint',
    wallets: [],
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/PMLogo-04.png',
    coingeckoId: ''
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Snipcoins',
    coin: 'SNIPS',
    xtokenSymbol: 'SNIPS',
    xtokenPrecision: 4,
    xtokenContract: 'snipcoins',
    wallets: [],
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/snips.png',
    coingeckoId: ''
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Uniswap',
    coin: 'UNI',
    xtokenSymbol: 'XUNI',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'UNI',
      symbol: 'UNI',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '0x1F9840A85D5AF5BF1D1762F925BDADDC4201F984',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'UNI',
      symbol: 'UNI',
      chain: exports.Chains.EthereumRopsten,
      network: exports.Networks.Ropsten,
      precision: 18,
      contract: '0x1F9840A85D5AF5BF1D1762F925BDADDC4201F984',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXUNI.png',
    coingeckoId: 'uniswap'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: '1INCH',
    coin: '1INCH',
    xtokenSymbol: 'XINCH',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: '1INCH',
      symbol: '1INCH',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '0x111111111117DC0AA78B770FA6A738034120C302',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXINCH.png',
    coingeckoId: '1inch'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Chainlink',
    coin: 'LINK',
    xtokenSymbol: 'XLINK',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'LINK',
      symbol: 'LINK',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 18,
      contract: '0x514910771AF9CA656AF840DFF83E8264ECF986CA',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXLINK.png',
    coingeckoId: 'chainlink'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Litecoin',
    coin: 'LTC',
    xtokenSymbol: 'XLTC',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'LTC',
      symbol: 'LTC',
      chain: exports.Chains.LitecoinMainnet,
      network: exports.Networks.Mainnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'LTC',
      symbol: 'LTC',
      chain: exports.Chains.LitecoinTestnet,
      network: exports.Networks.Testnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXLTC.png',
    coingeckoId: 'litecoin'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'Bitcoin Cash',
    coin: 'BCH',
    xtokenSymbol: 'XBCH',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BCH',
      symbol: 'BCH',
      chain: exports.Chains.BitcoinCashMainnet,
      network: exports.Networks.Mainnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : [], IS_TESTNET ? [{
      wallet: 'BCH',
      symbol: 'BCH',
      chain: exports.Chains.BitcoinCashTestnet,
      network: exports.Networks.Testnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXBCH.png',
    coingeckoId: 'bitcoin-cash'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'LunarCrush',
    coin: 'LUNR',
    xtokenSymbol: 'XLUNR',
    xtokenPrecision: 4,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'LUNR',
      symbol: 'LUNR',
      chain: exports.Chains.EthereumMainnet,
      network: exports.Networks.ERC20,
      precision: 4,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xlunr.png',
    coingeckoId: 'lunr-token'
  }, {
    allowSwap: false,
    allowBridge: IS_TESTNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Stellar',
    coin: 'XLM',
    xtokenSymbol: 'XXLM',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'XLM',
      symbol: 'XLM',
      chain: exports.Chains.StellarMainnet,
      network: exports.Networks.Mainnet,
      precision: 7,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : [], IS_TESTNET ? [{
      wallet: 'XLM',
      symbol: 'XLM',
      chain: exports.Chains.StellarTestnet,
      network: exports.Networks.Testnet,
      precision: 7,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXXLM.png',
    coingeckoId: 'stellar'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Sense',
    coin: 'SENSE',
    xtokenSymbol: 'XSENSE',
    xtokenPrecision: 4,
    xtokenContract: 'sense',
    wallets: [],
    image: 'https://www.proton.org/images/tokens/senseXSENSE.png',
    coingeckoId: 'sense'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Polkadot',
    coin: 'DOT',
    xtokenSymbol: 'XDOT',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'DOT',
      symbol: 'DOT',
      chain: exports.Chains.PolkadotMainnet,
      network: exports.Networks.Mainnet,
      precision: 10,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXDOT.png',
    coingeckoId: 'polkadot'
  }, {
    allowSwap: true,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Binance Coin',
    coin: 'BNB',
    xtokenSymbol: 'XBNB',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BNB',
      symbol: 'BNB',
      chain: exports.Chains.BinanceBEP20,
      network: exports.Networks.BEP20,
      precision: 18,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXBNB.png',
    coingeckoId: 'binancecoin'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Binance USD',
    coin: 'BUSD',
    xtokenSymbol: 'XBUSD',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'BUSD-BEP20',
      symbol: 'BUSD',
      chain: exports.Chains.BinanceBEP20,
      network: exports.Networks.BEP20,
      precision: 18,
      contract: '0xe9e7cea3dedca5984780bafc599bd69add087d56',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xbusd.png',
    coingeckoId: 'binance-usd'
  }, {
    allowSwap: true,
    allowBridge: true,
    allowLend: false,
    allowBorrow: false,
    name: 'EOS',
    coin: 'EOS',
    xtokenSymbol: 'XEOS',
    xtokenPrecision: 4,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'EOS',
      symbol: 'EOS',
      chain: exports.Chains.EosMainnet,
      network: exports.Networks.Mainnet,
      precision: 4,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : [], IS_TESTNET ? [{
      wallet: 'EOS',
      symbol: 'EOS',
      chain: exports.Chains.EosTestnet,
      network: exports.Networks.Testnet,
      precision: 4,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXEOS.png',
    coingeckoId: 'eos'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: IS_MAINNET,
    allowLend: true,
    allowBorrow: true,
    name: 'Dogecoin',
    coin: 'DOGE',
    xtokenSymbol: 'XDOGE',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'DOGE',
      symbol: 'DOGE',
      chain: exports.Chains.DogeMainnet,
      network: exports.Networks.Mainnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXDOGE.png',
    coingeckoId: 'dogecoin'
  }, {
    allowSwap: IS_MAINNET,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Cardano',
    coin: 'ADA',
    xtokenSymbol: 'XADA',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'ADA',
      symbol: 'ADA',
      chain: exports.Chains.CardanoMainnet,
      network: exports.Networks.Mainnet,
      precision: 6,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXADA.png',
    coingeckoId: 'cardano'
  }, // Adding
  {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Terra',
    coin: 'LUNA',
    xtokenSymbol: 'XLUNA',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [// ...(IS_MAINNET ? [{
      //     wallet: 'LUNA',
      //     symbol: 'LUNA',
      //     chain: Chains.TerraMainnet,
      //     network: Networks.Mainnet,
      //     precision: 6,
      //     contract: undefined,
      //     provider: Providers.FIREBLOCKS,
      //     hasWithdrawMemo: true
      // }]: [])
    ],
    image: 'https://www.proton.org/images/tokens/xtokensXLUNA.png',
    coingeckoId: 'terra-luna'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'TerraUSD',
    coin: 'UST',
    xtokenSymbol: 'XUST',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'UST',
      symbol: 'UST',
      chain: exports.Chains.TerraMainnet,
      network: exports.Networks.Mainnet,
      precision: 6,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXUST.png',
    coingeckoId: 'terrausd'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Solana',
    coin: 'SOL',
    xtokenSymbol: 'XSOL',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'SOL',
      symbol: 'SOL',
      chain: exports.Chains.SolanaMainnet,
      network: exports.Networks.Mainnet,
      precision: 9,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xsol.png',
    coingeckoId: 'solana'
  }, {
    allowSwap: false,
    allowBridge: IS_MAINNET,
    allowLend: false,
    allowBorrow: false,
    name: 'Ripple',
    coin: 'XRP',
    xtokenSymbol: 'XXRP',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'XRP',
      symbol: 'XRP',
      chain: exports.Chains.RippleMainnet,
      network: exports.Networks.Mainnet,
      precision: 6,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xxrp.png',
    coingeckoId: 'ripple'
  }, // Future
  {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Avalanche',
    coin: 'AVAX',
    xtokenSymbol: 'XAVAX',
    xtokenPrecision: 9,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'AVAX',
      symbol: 'AVAX',
      chain: exports.Chains.AvalancheCChain,
      network: exports.Networks.Mainnet,
      precision: 9,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXAVAX.png',
    coingeckoId: 'avalanche-2'
  }, {
    allowSwap: false,
    allowBridge: false,
    allowLend: false,
    allowBorrow: false,
    name: 'Polygon',
    coin: 'MATIC',
    xtokenSymbol: 'XMATIC',
    xtokenPrecision: 8,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_MAINNET ? [{
      wallet: 'MATIC',
      symbol: 'MATIC',
      chain: exports.Chains.PolygonMainnet,
      network: exports.Networks.Mainnet,
      precision: 18,
      contract: '0x0000000000000000000000000000000000000000',
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: false
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXMATIC.png',
    coingeckoId: 'matic-network'
  }, {
    allowSwap: false,
    allowBridge: IS_TESTNET,
    allowLend: false,
    allowBorrow: false,
    name: 'HBAR',
    coin: 'HBAR',
    xtokenSymbol: 'XHBAR',
    xtokenPrecision: 6,
    xtokenContract: 'xtokens',
    wallets: [].concat(IS_TESTNET ? [{
      wallet: 'HBAR',
      symbol: 'HBAR',
      chain: exports.Chains.HederaTestnet,
      network: exports.Networks.Testnet,
      precision: 8,
      contract: undefined,
      provider: exports.Providers.FIREBLOCKS,
      hasWithdrawMemo: true
    }] : []),
    image: 'https://www.proton.org/images/tokens/xtokensXHBAR.png',
    coingeckoId: 'hedera-hashgraph'
  }]; // Validation

  var walletWithDuplicateChains = coins.find(function (coin) {
    var chains = coin.wallets.map(function (wallet) {
      return wallet.chain;
    });
    return new Set(chains).size !== chains.length;
  });

  if (walletWithDuplicateChains) {
    throw new Error("Coin " + walletWithDuplicateChains.coin + " has duplicate chains in wallet");
  }

  return {
    allCoins: coins,
    swapCoins: coins.filter(function (coin) {
      return coin.allowSwap;
    }),
    bridgeCoins: coins.filter(function (coin) {
      return coin.allowBridge;
    }),
    lendCoins: coins.filter(function (coin) {
      return coin.allowLend;
    }),
    borrowCoins: coins.filter(function (coin) {
      return coin.allowBorrow;
    }),
    loanCoins: coins.filter(function (coin) {
      return coin.allowLend || coin.allowBorrow;
    }),
    allEnabledCoins: coins.filter(function (coin) {
      return coin.allowSwap || coin.allowBridge;
    })
  };
};

var accountParser = /*#__PURE__*/z.string().regex(/^[.1-5a-z]{0,12}[.1-5a-j]?$/);
var authorizationParser = /*#__PURE__*/z.object({
  actor: accountParser,
  permission: /*#__PURE__*/z.string()
});
var authorizationsParser = /*#__PURE__*/z.array(authorizationParser).min(1);
var ExtendedAssetParser = /*#__PURE__*/z.object({
  quantity: /*#__PURE__*/z.string(),
  contract: accountParser
});

var actionParser = /*#__PURE__*/z.object({
  account: /*#__PURE__*/z.string(),
  name: /*#__PURE__*/z.string(),
  authorization: /*#__PURE__*/z.array( /*#__PURE__*/z.object({
    actor: /*#__PURE__*/z.string(),
    permission: /*#__PURE__*/z.string()
  })),
  data: /*#__PURE__*/z.any(),
  hex_data: /*#__PURE__*/z.string().optional()
});
var transactionExtensionsParser = /*#__PURE__*/z.array(z.number().or(z.string())).optional();
var rawTransactionParser = /*#__PURE__*/z.object({
  expiration: /*#__PURE__*/z.string(),
  ref_block_num: /*#__PURE__*/z.number(),
  ref_block_prefix: /*#__PURE__*/z.number(),
  max_net_usage_words: /*#__PURE__*/z.number(),
  max_cpu_usage_ms: /*#__PURE__*/z.number(),
  delay_sec: /*#__PURE__*/z.number(),
  context_free_actions: /*#__PURE__*/z.array(actionParser),
  transaction_extensions: /*#__PURE__*/z.array(transactionExtensionsParser)
});
var baseActionParser = function baseActionParser(contract, action, data) {
  return z.object({
    account: contract === '*' ? accountParser : z.literal(contract),
    name: z.literal(action),
    data: z.object(data),
    authorization: authorizationsParser
  });
};
var baseActionSerializedParser = function baseActionSerializedParser(contract, action, data) {
  return z.object({
    account: contract === '*' ? accountParser : z.literal(contract),
    name: z.literal(action),
    data: z.string().or(z.object(data)),
    authorization: authorizationsParser
  });
};
var webauthActionParser = function webauthActionParser(contract, action, data) {
  return z.object({
    account: z.literal('webauthn'),
    name: z.literal('exec'),
    data: z.object({
      account: accountParser,
      key: z.object({
        key: z.array(z.string().or(z.object({
          modulus: z.string(),
          exponent: z.string()
        }))),
        user_presence: z.number(),
        rpid: z.string()
      }),
      nonce: z.number(),
      permissions: authorizationsParser,
      signature: z.object({
        auth_data: z.string(),
        client_json: z.string(),
        signature: z.string()
      }),
      trx: rawTransactionParser.merge(z.object({
        actions: z.array(baseActionSerializedParser(contract, action, data)).length(1)
      }))
    }),
    authorization: authorizationsParser
  });
};
var singleActionTransactionParser = function singleActionTransactionParser(contract, action, data) {
  var baseAction = baseActionParser(contract, action, data);
  var webauthAction = webauthActionParser(contract, action, data);
  return rawTransactionParser.merge(z.object({
    actions: z.array(baseAction.or(webauthAction)).length(1)
  }));
};

function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };
  return _extends.apply(this, arguments);
}

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}

function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];

  return arr2;
}

function _createForOfIteratorHelperLoose(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (it) return (it = it.call(o)).next.bind(it);

  if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
    if (it) o = it;
    var i = 0;
    return function () {
      if (i >= o.length) return {
        done: true
      };
      return {
        done: false,
        value: o[i++]
      };
    };
  }

  throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

var WRAP_CONTRACT = 'proton.wrap';
var WRAP_AUTH_ACTION = 'generateauth';
var FEE_FACTOR = 10000;
var initializeConstants = function initializeConstants(chain) {
  var _initializeCoins = initializeCoins(chain),
      swapCoins = _initializeCoins.swapCoins,
      bridgeCoins = _initializeCoins.bridgeCoins,
      allEnabledCoins = _initializeCoins.allEnabledCoins,
      allCoins = _initializeCoins.allCoins,
      lendCoins = _initializeCoins.lendCoins,
      borrowCoins = _initializeCoins.borrowCoins,
      loanCoins = _initializeCoins.loanCoins;

  var constants = {
    SWAP_CONTRACT: 'proton.swaps',
    DEX_CONTRACT: 'dex',
    FEE_FACTOR: FEE_FACTOR,
    GOOGLE_MAPS_KEY: 'AIzaSyDb2_CrK032kSIqBXbkdwmaLKWELl0SxVs',
    SWAP_URL: chain === 'proton' ? 'https://otc.protonswap.com' : 'https://otc-test.protonswap.com',
    WRAP_SERVER_URL: chain === 'proton' ? 'https://www.api.bloks.io/proton-wrap-public2' : 'https://www.api.bloks.io/proton-wrap-testnet-public2',
    WRAP_CONTRACT: WRAP_CONTRACT,
    WRAP_ACTIONS: {
      SAVE_ADDRESS: 'saveaddress2',
      DELETE_ADDRESS: 'deladdress2',
      WRAP_START: 'wrapstart2',
      WRAP_FINISH: 'wrapfinish2',
      WRAP_PROCESS: 'wrapprocess2',
      WRAP_SET_CONF: 'wrapsetconf2'
    },
    WRAP_TABLES: {
      ADDRESSES: 'addresses2',
      WRAPS: 'wraps2'
    },
    ADDRESSES_INDEXES: {
      BY_ACCOUNT: 2,
      BY_ADDR_HASH: 3
    },
    WRAPS_INDEXES: {
      BY_ACCOUNT: 2,
      BY_STATUS: 3,
      BY_WRAP_HASH: 4
    },
    WRAP_PROCESS_TIMER: 5000,
    FARM_CONTRACT: 'yield.farms',
    WEBHOOK_PERMISSION: 'webhook',
    PUBLIC_PERMISSION: 'public',
    LIGHT_PERMISSION: 'light',
    WRAP_AUTH_ACTION: WRAP_AUTH_ACTION,
    METAL_ENDPOINT: chain === 'proton' ? 'https://cirrus.metalpay.com' : 'https://cirrus-dev.metalpay.com',
    METAL_PROTON_ENDPOINT: chain === 'proton' ? 'https://api.protonchain.com' : 'https://api-dev.protonchain.com',
    METAL_DEX_HTTP_ENDPOINT: chain === 'proton' ? 'https://metallicus-dbapi-dev01.binfra.one/dex' : 'https://metallicus-dbapi-dev01.binfra.one/dex',
    METAL_DEX_WS_ENDPOINT: chain === 'proton' ? 'wss://metallicus-dbapi-dev01.binfra.one/dexws' : 'wss://metallicus-dbapi-dev01.binfra.one/dexws',
    PROTON_ENDPOINTS: chain === 'proton' ? ['https://metal-proton-rpc.global.binfra.one', 'https://proton.greymass.com', 'https://proton.eoscafeblock.com', 'https://proton.cryptolions.io', 'https://proton.eosusa.news'] : ['https://metal-protontest-rpc.global.binfra.one', 'https://testnet.protonchain.com'],
    CHAIN_ID: chain === 'proton' ? '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0' : '71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd',
    DEX_PROCESS_SIZE: 30,
    DEX_SLTPPROCESS_SIZE: 10,
    MAX_PRICE: "9223372036854775806",
    MIN_PRICE: 1,
    CHAIN: chain,
    SWAP_COINS: swapCoins,
    BRIDGE_COINS: bridgeCoins,
    ALL_ENABLED_COINS: allEnabledCoins,
    LEND_COINS: lendCoins,
    BORROW_COINS: borrowCoins,
    LOAN_COINS: loanCoins,
    ALL_COINS: allCoins,
    findBridgeCoinWalletByXtokenAndChain: function findBridgeCoinWalletByXtokenAndChain(xtokenSymbol, chain) {
      var bridgeCoin = constants.BRIDGE_COINS.find(function (bridgeCoin) {
        return bridgeCoin.xtokenSymbol === xtokenSymbol;
      });
      if (!bridgeCoin) return undefined;
      var bridgeWallet = bridgeCoin.wallets.find(function (bridgeWallet) {
        return bridgeWallet.chain === chain;
      });
      if (!bridgeWallet) return undefined;
      return _extends({}, bridgeCoin, bridgeWallet);
    },
    findBridgeCoinWallet: function findBridgeCoinWallet(coin, wallet) {
      var bridgeCoin = constants.BRIDGE_COINS.find(function (bridgeCoin) {
        return bridgeCoin.coin === coin;
      });
      if (!bridgeCoin) return undefined;
      var bridgeWallet = bridgeCoin.wallets.find(function (bridgeWallet) {
        return bridgeWallet.wallet === wallet;
      });
      if (!bridgeWallet) return undefined;
      return _extends({}, bridgeCoin, bridgeWallet);
    },
    findBridgeCoinNetwork: function findBridgeCoinNetwork(coin, network) {
      var bridgeCoin = constants.BRIDGE_COINS.find(function (bridgeCoin) {
        return bridgeCoin.coin === coin;
      });
      if (!bridgeCoin) return undefined;
      var bridgeWallet = bridgeCoin.wallets.find(function (bridgeWallet) {
        return bridgeWallet.network === network;
      });
      if (!bridgeWallet) return undefined;
      return _extends({}, bridgeCoin, bridgeWallet);
    }
  };
  return constants;
};

var createAbstractAuthParser = function createAbstractAuthParser(contract, action, data) {
  return z.object({
    signer: authorizationParser,
    signatures: z.array(z.string()).length(1),
    transaction: singleActionTransactionParser(contract, action, data)
  });
};
var generateAuthData = {
  time: /*#__PURE__*/z.string(),
  protonAccount: /*#__PURE__*/z.string()
};
var generateAuthParser = /*#__PURE__*/createAbstractAuthParser(WRAP_CONTRACT, WRAP_AUTH_ACTION, generateAuthData);

var addressParser = /*#__PURE__*/z.object({
  index: /*#__PURE__*/z.number(),
  account: accountParser,
  chain: /*#__PURE__*/z.string(),
  address: /*#__PURE__*/z.string(),
  address_hash: /*#__PURE__*/z.string()
});
var generateAddressBodyParser = /*#__PURE__*/z.object({
  coin: z.string(),
  wallet: z.string()
}).merge(generateAuthParser);
var generateAddressResponse = /*#__PURE__*/z.object({
  id: /*#__PURE__*/z.string(),
  address: /*#__PURE__*/z.string(),
  coin: /*#__PURE__*/z.string(),
  wallet: /*#__PURE__*/z.string(),
  memo: /*#__PURE__*/z.string().optional()
});

var rateParser = /*#__PURE__*/z.object({
  counterCurrency: /*#__PURE__*/z.string(),
  price: /*#__PURE__*/z.number(),
  priceChangePercent: /*#__PURE__*/z.number(),
  marketCap: /*#__PURE__*/z.number(),
  volume: /*#__PURE__*/z.number(),
  timestamp: /*#__PURE__*/z.number()
});
var exchangeRateParser = /*#__PURE__*/z.object({
  contract: /*#__PURE__*/z.string(),
  symbol: /*#__PURE__*/z.string(),
  rank: /*#__PURE__*/z.number(),
  rates: /*#__PURE__*/z.array(rateParser)
});
var exchangeRatesParser = /*#__PURE__*/z.array(exchangeRateParser);
var bloksRatesParser = /*#__PURE__*/z.array( /*#__PURE__*/z.object({
  contract: /*#__PURE__*/z.string(),
  symbol: /*#__PURE__*/z.string(),
  rank: /*#__PURE__*/z.number(),
  rates: /*#__PURE__*/z.array(rateParser)
}));

(function (Type) {
  Type["RECEIVE"] = "receive";
  Type["SEND"] = "send";
})(exports.Type || (exports.Type = {}));

var depositBodyParser = /*#__PURE__*/z.object({
  id: /*#__PURE__*/z.string(),
  type: /*#__PURE__*/z.nativeEnum(exports.Type),
  hash: /*#__PURE__*/z.string(),
  coin: /*#__PURE__*/z.string(),
  wallet: /*#__PURE__*/z.string(),
  network: /*#__PURE__*/z.string().optional() // "erc29"

});
var transactionParser = /*#__PURE__*/z.object({
  id: /*#__PURE__*/z.string(),
  wallet: /*#__PURE__*/z.string(),
  value: /*#__PURE__*/z.number(),
  valueString: /*#__PURE__*/z.string(),
  address: /*#__PURE__*/z.string(),
  type: /*#__PURE__*/z.nativeEnum(exports.Type),
  state: /*#__PURE__*/z.string(),
  confirmations: /*#__PURE__*/z.number(),
  hash: /*#__PURE__*/z.string(),
  blockHash: /*#__PURE__*/z.string().optional().nullable(),
  blockHeight: /*#__PURE__*/z.number().optional().nullable() // 643159

});

var otcOrderResponseParser = /*#__PURE__*/z.object({
  success: /*#__PURE__*/z.boolean(),
  transaction_id: /*#__PURE__*/z.string(),
  errormsg: /*#__PURE__*/z.string().optional()
});
var otcQuoteBodyParser = /*#__PURE__*/z.object({
  baseAmount: /*#__PURE__*/z.number(),
  baseSymbol: /*#__PURE__*/z.string(),
  quoteSymbol: /*#__PURE__*/z.string()
});
var otcQuoteResponseParser = /*#__PURE__*/z.object({
  success: /*#__PURE__*/z.boolean(),
  token: /*#__PURE__*/z.string(),
  qty: /*#__PURE__*/z.number(),
  errormsg: /*#__PURE__*/z.string().optional()
});

var withdrawData = {
  from: /*#__PURE__*/z.string().refine(function (val) {
    return val !== WRAP_CONTRACT;
  }, {
    message: WRAP_CONTRACT + " must be receiver"
  }),
  to: /*#__PURE__*/z.literal(WRAP_CONTRACT),
  quantity: /*#__PURE__*/z.string(),
  memo: /*#__PURE__*/z.string()
};
var withdrawBodyParser = /*#__PURE__*/z.object({
  signer: authorizationParser,
  signatures: /*#__PURE__*/z.array(z.string()).length(1),
  transaction: /*#__PURE__*/singleActionTransactionParser('*', 'transfer', withdrawData),
  quoteId: /*#__PURE__*/z.string(),
  provider: /*#__PURE__*/z.string().optional()
});
var withdrawMetalResponseParser = /*#__PURE__*/z.object({
  success: /*#__PURE__*/z.boolean(),
  id: /*#__PURE__*/z.string()
});
var withdrawalFeeQuoteParser = /*#__PURE__*/z.object({
  quoteId: /*#__PURE__*/z.string(),
  estimatedFee: /*#__PURE__*/z.string(),
  currency: /*#__PURE__*/z.string(),
  network: /*#__PURE__*/z.string()
});

var withdrawHistoryMetalSwapParser = /*#__PURE__*/z.object({
  id: /*#__PURE__*/z.string(),
  status: /*#__PURE__*/z.string(),
  amount: /*#__PURE__*/z.string(),
  currency: /*#__PURE__*/z.string(),
  network: /*#__PURE__*/z.string(),
  created: /*#__PURE__*/z.string(),
  withdrawalAddress: /*#__PURE__*/z.string(),
  withdrawalHash: /*#__PURE__*/z.string().optional()
});
var withdrawHistoryMetalResponseParser = /*#__PURE__*/z.object({
  swaps: /*#__PURE__*/z.array(withdrawHistoryMetalSwapParser),
  page: /*#__PURE__*/z.number(),
  pageSize: /*#__PURE__*/z.number(),
  numberOfElements: /*#__PURE__*/z.number(),
  totalPages: /*#__PURE__*/z.number(),
  totalElements: /*#__PURE__*/z.number()
});

(function (Status) {
  Status["PENDING"] = "pending";
  Status["SUCCESS"] = "success";
  Status["FAIL"] = "fail";
  Status["PROCESSING"] = "processing";
})(exports.Status || (exports.Status = {}));

var wrapStartParser = /*#__PURE__*/z.object({
  balance: ExtendedAssetParser,
  id: /*#__PURE__*/z.string(),
  txid: /*#__PURE__*/z.string(),
  chain: /*#__PURE__*/z.string(),
  deposit_address: /*#__PURE__*/z.string(),
  confirmations: /*#__PURE__*/z.number()
});
var wrapSetConfParser = /*#__PURE__*/z.object({
  wrap_hash: /*#__PURE__*/z.string(),
  confirmations: /*#__PURE__*/z.number()
});
var wrapParser = /*#__PURE__*/z.object({
  index: /*#__PURE__*/z.number(),
  proton_account: /*#__PURE__*/z.string(),
  balance: ExtendedAssetParser,
  id: /*#__PURE__*/z.string(),
  txid: /*#__PURE__*/z.string(),
  chain: /*#__PURE__*/z.string(),
  deposit_address: /*#__PURE__*/z.string(),
  status: /*#__PURE__*/z.nativeEnum(exports.Status),
  finish_txid: /*#__PURE__*/z.string(),
  wrap_hash: /*#__PURE__*/z.string(),
  confirmations: /*#__PURE__*/z.number()
});

var _TOPICS;
var numTransform = /*#__PURE__*/z.string().regex(/\d+/).transform(Number);
var ohlcvParser = /*#__PURE__*/z.object({
  time: /*#__PURE__*/z.number(),
  open: /*#__PURE__*/z.number(),
  high: /*#__PURE__*/z.number(),
  low: /*#__PURE__*/z.number(),
  close: /*#__PURE__*/z.number(),
  volume: /*#__PURE__*/z.number(),
  volume_bid: /*#__PURE__*/z.number(),
  count: /*#__PURE__*/z.number()
});
var getOhlcvParser = /*#__PURE__*/z.object({
  interval: /*#__PURE__*/z.string(),
  dateFrom: /*#__PURE__*/z.string(),
  dateTo: /*#__PURE__*/z.string(),
  marketId: /*#__PURE__*/z.number().or(numTransform),
  limit: /*#__PURE__*/z.number().or(numTransform)["default"](500).refine(function (n) {
    return n <= 1000;
  }, 'Max limit is 1000')
});
var getOhlcvResponseParser = /*#__PURE__*/z.object({
  sync: /*#__PURE__*/z.number(),
  data: /*#__PURE__*/z.array(ohlcvParser)
});
var orderHistoryParser = /*#__PURE__*/z.object({
  seq: /*#__PURE__*/z.number(),
  block_num: /*#__PURE__*/z.number(),
  block_time: /*#__PURE__*/z.string(),
  order_id: /*#__PURE__*/z.number(),
  market_id: /*#__PURE__*/z.number(),
  quantity_init: /*#__PURE__*/z.number().optional(),
  quantity_curr: /*#__PURE__*/z.number(),
  price: /*#__PURE__*/z.number(),
  account_name: /*#__PURE__*/z.string(),
  order_side: /*#__PURE__*/z.number(),
  order_type: /*#__PURE__*/z.number(),
  trigger_price: /*#__PURE__*/z.number(),
  fill_type: /*#__PURE__*/z.number(),
  status: /*#__PURE__*/z.string(),
  quantity_change: /*#__PURE__*/z.number(),
  trx_id: /*#__PURE__*/z.string()
});
var getOrderHistoryParser = /*#__PURE__*/z.object({
  account: /*#__PURE__*/z.string(),
  marketId: /*#__PURE__*/z.number().or(numTransform).optional(),
  offset: /*#__PURE__*/z.number().or(numTransform)["default"](0),
  limit: /*#__PURE__*/z.number().or(numTransform)["default"](100).refine(function (n) {
    return n <= 250;
  }, 'Max limit is 250')
});
var getOrderHistoryResponseParser = /*#__PURE__*/z.object({
  sync: /*#__PURE__*/z.number(),
  count: /*#__PURE__*/z.number(),
  data: /*#__PURE__*/z.array(orderHistoryParser)
});
var depthParser = /*#__PURE__*/z.object({
  level: /*#__PURE__*/z.number(),
  ask: /*#__PURE__*/z.number(),
  bid: /*#__PURE__*/z.number(),
  count: /*#__PURE__*/z.number()
});
var getDepthParser = /*#__PURE__*/z.object({
  marketId: /*#__PURE__*/z.string(),
  step: /*#__PURE__*/z.string(),
  limit: /*#__PURE__*/z.number().or(numTransform)["default"](100).refine(function (n) {
    return n <= 250;
  }, 'Max limit is 250')
});
var getDepthResponseParser = /*#__PURE__*/z.object({
  sync: /*#__PURE__*/z.number(),
  data: /*#__PURE__*/z.object({
    bids: /*#__PURE__*/z.array(depthParser),
    asks: /*#__PURE__*/z.array(depthParser)
  })
});
var dailyParser = /*#__PURE__*/z.object({
  market_id: /*#__PURE__*/z.number(),
  first: /*#__PURE__*/z.number(),
  last: /*#__PURE__*/z.number(),
  bid: /*#__PURE__*/z.number(),
  ask: /*#__PURE__*/z.number(),
  change_percentage_24hr: /*#__PURE__*/z.number()
});
var getDailyResponseParser = /*#__PURE__*/z.object({
  sync: /*#__PURE__*/z.number(),
  data: /*#__PURE__*/z.array(dailyParser)
});
var tradeParser = /*#__PURE__*/z.object({
  block_num: /*#__PURE__*/z.number(),
  block_time: /*#__PURE__*/z.string(),
  trade_id: /*#__PURE__*/z.number(),
  market_id: /*#__PURE__*/z.number(),
  price: /*#__PURE__*/z.number(),
  bid_user: /*#__PURE__*/z.string(),
  bid_user_order_id: /*#__PURE__*/z.number(),
  bid_total: /*#__PURE__*/z.number(),
  bid_amount: /*#__PURE__*/z.number(),
  bid_fee: /*#__PURE__*/z.number(),
  ask_user: /*#__PURE__*/z.string(),
  ask_user_order_id: /*#__PURE__*/z.number(),
  ask_total: /*#__PURE__*/z.number(),
  ask_amount: /*#__PURE__*/z.number(),
  ask_fee: /*#__PURE__*/z.number(),
  order_side: /*#__PURE__*/z.number(),
  trx_id: /*#__PURE__*/z.string()
});
var getTradesParser = /*#__PURE__*/z.object({
  marketId: /*#__PURE__*/z.number().or(numTransform),
  offset: /*#__PURE__*/z.number().or(numTransform)["default"](0),
  limit: /*#__PURE__*/z.number().or(numTransform)["default"](100).refine(function (n) {
    return n <= 250;
  }, 'Max limit is 250')
});
var getTradesResponseParser = /*#__PURE__*/z.object({
  sync: /*#__PURE__*/z.number(),
  data: /*#__PURE__*/z.array(tradeParser)
});
var syncParser = /*#__PURE__*/z.object({
  sourceid: /*#__PURE__*/z.number(),
  block_num: /*#__PURE__*/z.string(),
  block_time: /*#__PURE__*/z.string(),
  irreversible: /*#__PURE__*/z.string(),
  is_master: /*#__PURE__*/z.number(),
  last_updated: /*#__PURE__*/z.string()
});
var getSyncResponseParser = /*#__PURE__*/z.object({
  dbSecondsBehind: /*#__PURE__*/z.number(),
  chronicleSecondsBehind: /*#__PURE__*/z.number(),
  maxSecondsBehind: /*#__PURE__*/z.number()
});

(function (orderType) {
  orderType[orderType["ORDERBOOK"] = 0] = "ORDERBOOK";
  orderType[orderType["LIMIT"] = 1] = "LIMIT";
  orderType[orderType["STOPLOSS"] = 2] = "STOPLOSS";
  orderType[orderType["TAKEPROFIT"] = 3] = "TAKEPROFIT";
})(exports.orderType || (exports.orderType = {}));

(function (orderSide) {
  orderSide[orderSide["INVALID"] = 0] = "INVALID";
  orderSide[orderSide["BUY"] = 1] = "BUY";
  orderSide[orderSide["SELL"] = 2] = "SELL";
})(exports.orderSide || (exports.orderSide = {}));

(function (fillType) {
  fillType[fillType["GTC"] = 0] = "GTC";
  fillType[fillType["IOC"] = 1] = "IOC";
  fillType[fillType["POST_ONLY"] = 2] = "POST_ONLY";
})(exports.fillType || (exports.fillType = {}));

(function (logStatus) {
  logStatus["CREATE"] = "create";
  logStatus["UPDATE"] = "update";
  logStatus["TRANSFER"] = "transfer";
  logStatus["CANCEL"] = "cancel";
  logStatus["DELETE"] = "delete";
})(exports.logStatus || (exports.logStatus = {}));

(function (ITopics) {
  ITopics["TRADES"] = "TRADES";
  ITopics["ORDERS"] = "ORDERS";
})(exports.ITopics || (exports.ITopics = {}));

var TOPICS = (_TOPICS = {}, _TOPICS[exports.ITopics.TRADES] = {
  topic: exports.ITopics.TRADES
}, _TOPICS[exports.ITopics.ORDERS] = {
  topic: exports.ITopics.ORDERS
}, _TOPICS);

var loginAccountParamsV3Parser = /*#__PURE__*/z.object({
  email: z.string().optional(),
  verificationCode: z.string().optional()
}).merge(generateAuthParser);

var isSameToken = function isSameToken(token1, token2) {
  return token1.xtokenSymbol === token2.xtokenSymbol && token1.xtokenPrecision === token2.xtokenPrecision && token1.xtokenContract === token2.xtokenContract;
};
var median = function median(numbers) {
  var sorted = numbers.slice().sort(function (a, b) {
    return a - b;
  });
  var middle = Math.floor(sorted.length / 2);

  if (sorted.length % 2 === 0) {
    return (sorted[middle - 1] + sorted[middle]) / 2;
  }

  return sorted[middle];
};

var INode = function INode(key, data) {
  this.key = void 0;
  this.data = {};
  this.key = key;

  if (data) {
    this.data = data;
  }
};
var ILink = function ILink(from, to, data) {
  this.from = void 0;
  this.to = void 0;
  this.data = {};
  this.from = from;
  this.to = to;

  if (data) {
    this.data = data;
  }
};
var Graph = /*#__PURE__*/function () {
  function Graph() {
    this.nodes = [];
    this.links = [];
    this.lastPathFound = [];

    this.isEquals = function (a, b) {
      return a.key === b.key;
    };
  }

  var _proto = Graph.prototype;

  _proto.addNode = function addNode(k, v) {
    var node = this.findNode(k);

    if (!node) {
      this.nodes.push(new INode(k, v));
    }
  };

  _proto.addNodes = function addNodes() {
    var _this = this;

    for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {
      nodes[_key] = arguments[_key];
    }

    nodes.forEach(function (node) {
      return typeof node === "string" ? _this.addNode(node) : _this.addNode(node[0], node[1]);
    });
  };

  _proto.findNode = function findNode(k) {
    var _this2 = this;

    var inode = new INode(k);
    return this.nodes.find(function (node) {
      return _this2.isEquals(node, inode);
    });
  };

  _proto.findNodes = function findNodes() {
    var _this3 = this;

    for (var _len2 = arguments.length, keys = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {
      keys[_key2] = arguments[_key2];
    }

    return keys.map(function (k) {
      return _this3.findNode(k);
    });
  };

  _proto.requireFindNodes = function requireFindNodes() {
    var nodes = this.findNodes.apply(this, arguments);

    if (nodes.some(function (n) {
      return n === undefined;
    })) {
      throw new Error('One of the nodes does not exist');
    }

    return nodes;
  };

  _proto.addLink = function addLink(nodeA, nodeB, data) {
    var _this$requireFindNode = this.requireFindNodes(nodeA, nodeB),
        inodeA = _this$requireFindNode[0],
        inodeB = _this$requireFindNode[1];

    this.links.push(new ILink(inodeA, inodeB, data));
  };

  _proto.addLinks = function addLinks() {
    var _this4 = this;

    for (var _len3 = arguments.length, links = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {
      links[_key3] = arguments[_key3];
    }

    links.forEach(function (link) {
      return _this4.addLink.apply(_this4, link);
    });
  }
  /**
   * Get all nodes linked
   * to from `node`.
   */
  ;

  _proto.findLinkedNodes = function findLinkedNodes(node) {
    var _this5 = this;

    return this.links.reduce(function (acc, link) {
      if (_this5.isEquals(link.from, node)) {
        acc.push(link.to);
      }

      return acc;
    }, []);
  };

  _proto.findAllPaths = function findAllPaths(from, to) {
    var _this6 = this;

    var allPaths = [];

    var _this$requireFindNode2 = this.requireFindNodes(from, to),
        fromNode = _this$requireFindNode2[0],
        toNode = _this$requireFindNode2[1];

    var path = [fromNode];
    var seen = new Set();

    var stuck = function stuck(x) {
      if (_this6.isEquals(x, toNode)) {
        return false;
      }

      for (var _iterator = _createForOfIteratorHelperLoose(_this6.findLinkedNodes(x)), _step; !(_step = _iterator()).done;) {
        var y = _step.value;

        if (!seen.has(y.key)) {
          seen.add(y.key);

          if (!stuck(y)) {
            return false;
          }
        }
      }

      return true;
    };

    var search = function search(x) {
      if (_this6.isEquals(x, toNode)) {
        allPaths.push(cloneDeep(path));
        return;
      }

      seen = new Set(path.map(function (p) {
        return p.key;
      }));

      if (stuck(x)) {
        return;
      }

      for (var _iterator2 = _createForOfIteratorHelperLoose(_this6.findLinkedNodes(x)), _step2; !(_step2 = _iterator2()).done;) {
        var y = _step2.value;

        if (!path.includes(y)) {
          path.push(y);
          search(y);
          path.pop();
        }
      }
    };

    search(fromNode);
    return allPaths;
  };

  return Graph;
}();

/**
 * XPR<>XUSDT (XPR -> XUSDT)
 *
 *                     pool1 * pool2
 *  term =  pool2  -  --------------
 *                     pool1 + swap
 *
 *  result = term - (term * fee)
 */

var compute_transfer = function compute_transfer(pool1, pool2, swap, exchange_fee, precision) {
  var term1 = pool2;
  var term2over = pool1.times(pool2);
  var term2under = pool1.plus(swap);
  var term2 = term2over.div(term2under).integerValue(bignumber_js.BigNumber.ROUND_DOWN);
  var term = term1.minus(term2);
  var fee = new bignumber_js.BigNumber(exchange_fee).div(FEE_FACTOR);
  var result = term.minus(term.times(fee));
  return result.integerValue(bignumber_js.BigNumber.ROUND_DOWN).shiftedBy(-precision);
};
var compute_transfer_curve = function compute_transfer_curve(reserve_in, reserve_out, amount_in, exchange_fee, precision, amplifier) {
  if (amplifier === 0) {
    return compute_transfer(new bignumber_js.BigNumber(reserve_in), new bignumber_js.BigNumber(reserve_out), new bignumber_js.BigNumber(amount_in), exchange_fee, precision);
  }

  var MAX_ITERATIONS = 10;
  var sum = reserve_in + reserve_out;
  var D = sum;
  var D_prev = 0;

  var F = function F(v) {
    return (v >= 0 ? 1 : -1) * Math.floor(Math.abs(v));
  };

  var i = MAX_ITERATIONS;

  while (D != D_prev && i--) {
    var prod1 = F(F(D * D / (reserve_in * 2)) * D / (reserve_out * 2));
    D_prev = D;
    D = F(2 * D * (amplifier * sum + prod1) / ((2 * amplifier - 1) * D + 3 * prod1));
  }

  var b = reserve_in + amount_in + F(D / (amplifier * 2)) - D;
  var c = F(F(D * D / ((reserve_in + amount_in) * 2)) * D / (amplifier * 4));
  var x = D,
      x_prev = 0;
  i = MAX_ITERATIONS;

  while (x != x_prev && i--) {
    x_prev = F(x);
    x = +new bignumber_js.BigNumber(x * x + c).div(2 * x + b).toFixed(0, bignumber_js.BigNumber.ROUND_DOWN);
  }

  if (reserve_out <= x) {
    throw new Error("curve: insufficient reserve out");
  } // Amount out + Fee + 1


  var amount_out_with_fee = new bignumber_js.BigNumber(reserve_out - x); // Fee + 1
  // +1 covers small precision issues

  var fee = amount_out_with_fee.times(exchange_fee).div(FEE_FACTOR).plus(1).toFixed(0, bignumber_js.BigNumber.ROUND_DOWN); // Amount out

  var amount_out = amount_out_with_fee.minus(fee);
  return amount_out.integerValue(bignumber_js.BigNumber.ROUND_DOWN).shiftedBy(-precision);
};
var compute_liquidity = function compute_liquidity(amount_lt, pool, lt_supply, precision) {
  var over = amount_lt.times(pool);
  var under = lt_supply;
  var result = over.div(under).integerValue(bignumber_js.BigNumber.ROUND_DOWN);
  return +result.shiftedBy(-precision).toFixed(precision, bignumber_js.BigNumber.ROUND_DOWN);
};
var isInputInvalid = function isInputInvalid(data, value, pool) {
  value = String(value);
  var isBackspace = data === null;
  var isNumber = !/[0-9]|\./.test(data);
  var isDoubleDot = data === '.' && value.indexOf('.') !== value.length - 1;
  var isPrecisionTooHigh = value && value.indexOf('.') !== -1 && value.split('.')[1].length > pool.xtokenPrecision;
  var isInvalid = !isBackspace && Boolean(isNumber || isDoubleDot || isPrecisionTooHigh);
  return isInvalid;
};
var applyDiscountToFee = function applyDiscountToFee(fee, staked) {
  if (staked >= 10000000) {
    return fee * 0;
  } else if (staked >= 1000000) {
    return fee * 0.33;
  } else if (staked >= 100000) {
    return fee * 0.66;
  } else {
    return fee;
  }
};

exports.ExtendedAssetParser = ExtendedAssetParser;
exports.FEE_FACTOR = FEE_FACTOR;
exports.Graph = Graph;
exports.ILink = ILink;
exports.INode = INode;
exports.TOPICS = TOPICS;
exports.WRAP_AUTH_ACTION = WRAP_AUTH_ACTION;
exports.WRAP_CONTRACT = WRAP_CONTRACT;
exports.accountParser = accountParser;
exports.addressParser = addressParser;
exports.applyDiscountToFee = applyDiscountToFee;
exports.authorizationParser = authorizationParser;
exports.authorizationsParser = authorizationsParser;
exports.baseActionParser = baseActionParser;
exports.baseActionSerializedParser = baseActionSerializedParser;
exports.bloksRatesParser = bloksRatesParser;
exports.compute_liquidity = compute_liquidity;
exports.compute_transfer = compute_transfer;
exports.compute_transfer_curve = compute_transfer_curve;
exports.createAbstractAuthParser = createAbstractAuthParser;
exports.dailyParser = dailyParser;
exports.depositBodyParser = depositBodyParser;
exports.depthParser = depthParser;
exports.exchangeRateParser = exchangeRateParser;
exports.exchangeRatesParser = exchangeRatesParser;
exports.explorerLinkByChain = explorerLinkByChain;
exports.generateAddressBodyParser = generateAddressBodyParser;
exports.generateAddressResponse = generateAddressResponse;
exports.generateAuthParser = generateAuthParser;
exports.getDailyResponseParser = getDailyResponseParser;
exports.getDepthParser = getDepthParser;
exports.getDepthResponseParser = getDepthResponseParser;
exports.getOhlcvParser = getOhlcvParser;
exports.getOhlcvResponseParser = getOhlcvResponseParser;
exports.getOrderHistoryParser = getOrderHistoryParser;
exports.getOrderHistoryResponseParser = getOrderHistoryResponseParser;
exports.getSyncResponseParser = getSyncResponseParser;
exports.getTradesParser = getTradesParser;
exports.getTradesResponseParser = getTradesResponseParser;
exports.initializeCoins = initializeCoins;
exports.initializeConstants = initializeConstants;
exports.isInputInvalid = isInputInvalid;
exports.isSameToken = isSameToken;
exports.loginAccountParamsV3Parser = loginAccountParamsV3Parser;
exports.median = median;
exports.ohlcvParser = ohlcvParser;
exports.orderHistoryParser = orderHistoryParser;
exports.otcOrderResponseParser = otcOrderResponseParser;
exports.otcQuoteBodyParser = otcQuoteBodyParser;
exports.otcQuoteResponseParser = otcQuoteResponseParser;
exports.protonExplorerTxUrl = protonExplorerTxUrl;
exports.rateParser = rateParser;
exports.similarChains = similarChains;
exports.singleActionTransactionParser = singleActionTransactionParser;
exports.syncParser = syncParser;
exports.tradeParser = tradeParser;
exports.transactionParser = transactionParser;
exports.webauthActionParser = webauthActionParser;
exports.withdrawBodyParser = withdrawBodyParser;
exports.withdrawHistoryMetalResponseParser = withdrawHistoryMetalResponseParser;
exports.withdrawHistoryMetalSwapParser = withdrawHistoryMetalSwapParser;
exports.withdrawMetalResponseParser = withdrawMetalResponseParser;
exports.withdrawalFeeQuoteParser = withdrawalFeeQuoteParser;
exports.wrapParser = wrapParser;
exports.wrapSetConfParser = wrapSetConfParser;
exports.wrapStartParser = wrapStartParser;
//# sourceMappingURL=wrap-constants.cjs.development.js.map
