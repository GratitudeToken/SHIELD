export declare class INode<T> {
    key: string;
    data: T;
    constructor(key: string, data?: T);
}
export declare class ILink<T> {
    from: INode<T>;
    to: INode<T>;
    data: T;
    constructor(from: INode<T>, to: INode<T>, data?: T);
}
export declare class Graph<T> {
    nodes: INode<T>[];
    links: ILink<T>[];
    lastPathFound: INode<T>[];
    isEquals: (a: INode<T>, b: INode<T>) => boolean;
    addNode(k: string, v?: T): void;
    addNodes(...nodes: (string | [string, T?])[]): void;
    findNode(k: string): INode<T> | undefined;
    findNodes(...keys: string[]): (INode<T> | undefined)[];
    requireFindNodes(...keys: string[]): INode<T>[];
    addLink(nodeA: string, nodeB: string, data?: T): void;
    addLinks(...links: [nodeA: string, nodeB: string, data?: T][]): void;
    /**
     * Get all nodes linked
     * to from `node`.
     */
    findLinkedNodes(node: INode<T>): INode<T>[];
    findAllPaths(from: string, to: string): INode<T>[][];
}
