import { Coin, CoinWallet } from './coins';
export declare const WRAP_CONTRACT = "proton.wrap";
export declare const WRAP_AUTH_ACTION = "generateauth";
export declare const FEE_FACTOR = 10000;
export declare const initializeConstants: (chain: string) => {
    SWAP_CONTRACT: string;
    DEX_CONTRACT: string;
    FEE_FACTOR: number;
    GOOGLE_MAPS_KEY: string;
    SWAP_URL: string;
    WRAP_SERVER_URL: string;
    WRAP_CONTRACT: string;
    WRAP_ACTIONS: {
        SAVE_ADDRESS: string;
        DELETE_ADDRESS: string;
        WRAP_START: string;
        WRAP_FINISH: string;
        WRAP_PROCESS: string;
        WRAP_SET_CONF: string;
    };
    WRAP_TABLES: {
        ADDRESSES: string;
        WRAPS: string;
    };
    ADDRESSES_INDEXES: {
        BY_ACCOUNT: number;
        BY_ADDR_HASH: number;
    };
    WRAPS_INDEXES: {
        BY_ACCOUNT: number;
        BY_STATUS: number;
        BY_WRAP_HASH: number;
    };
    WRAP_PROCESS_TIMER: number;
    FARM_CONTRACT: string;
    WEBHOOK_PERMISSION: string;
    PUBLIC_PERMISSION: string;
    LIGHT_PERMISSION: string;
    WRAP_AUTH_ACTION: string;
    METAL_ENDPOINT: string;
    METAL_PROTON_ENDPOINT: string;
    METAL_DEX_HTTP_ENDPOINT: string;
    METAL_DEX_WS_ENDPOINT: string;
    PROTON_ENDPOINTS: string[];
    CHAIN_ID: string;
    DEX_PROCESS_SIZE: number;
    DEX_SLTPPROCESS_SIZE: number;
    MAX_PRICE: string;
    MIN_PRICE: number;
    CHAIN: string;
    SWAP_COINS: Coin[];
    BRIDGE_COINS: Coin[];
    ALL_ENABLED_COINS: Coin[];
    LEND_COINS: Coin[];
    BORROW_COINS: Coin[];
    LOAN_COINS: Coin[];
    ALL_COINS: Coin[];
    findBridgeCoinWalletByXtokenAndChain(xtokenSymbol: string, chain: string): CoinWallet | undefined;
    findBridgeCoinWallet(coin: string, wallet: string): CoinWallet | undefined;
    findBridgeCoinNetwork(coin: string, network: string): CoinWallet | undefined;
};
