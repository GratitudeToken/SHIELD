import { Asset } from '@bloks/numbers';
export declare enum Chains {
    BitcoinMainnet = "Bitcoin",
    BitcoinTestnet = "Bitcoin (Testnet)",
    EthereumMainnet = "Ethereum",
    EthereumRopsten = "Ethereum (Ropsten)",
    LitecoinMainnet = "Litecoin",
    LitecoinTestnet = "Litecoin (Testnet)",
    BitcoinCashMainnet = "Bitcoin Cash",
    BitcoinCashTestnet = "Bitcoin Cash (Testnet)",
    StellarMainnet = "Stellar",
    StellarTestnet = "Stellar (Testnet)",
    ProtonMainnet = "Proton",
    ProtonTestnet = "Proton (Testnet)",
    PolkadotMainnet = "Polkadot",
    BinanceBEP2 = "Binance (BEP2)",
    BinanceBEP20 = "Binance (BEP20)",
    EosMainnet = "EOS",
    EosTestnet = "EOS (Jungle Testnet)",
    HederaMainnet = "Hedera (Mainnet)",
    HederaTestnet = "Hedera (Testnet)",
    DogeMainnet = "Dogecoin",
    CardanoMainnet = "Cardano",
    AvalancheXChain = "Avalanche X-Chain",
    AvalancheCChain = "Avalanche C-Chain",
    PolygonMainnet = "Polygon",
    TerraMainnet = "Terra",
    RippleMainnet = "Ripple",
    SolanaMainnet = "Solana",
    MetalXTestnet = "Metal X-Chain (Testnet)",
    MetalCTestnet = "Metal C-Chain (Testnet)",
    MetalCMainnet = "Metal C-Chain"
}
export declare enum Networks {
    Mainnet = "mainnet",
    Testnet = "testnet",
    Ropsten = "ropsten",
    ERC20 = "erc20",
    BEP20 = "bep20",
    XLM = "xlm",
    AVM = "avm",
    EVM = "evm"
}
export declare const similarChains: {
    Ethereum: Chains[];
    "Binance (BEP20)": Chains[];
};
export interface Coin {
    allowSwap: boolean;
    allowBridge: boolean;
    allowLend: boolean;
    allowBorrow: boolean;
    name: string;
    coin: string;
    xtokenSymbol: string;
    xtokenPrecision: number;
    xtokenContract: string;
    wallets: Wallet[];
    image: string;
    coingeckoId: string;
    balance?: Asset;
}
export interface Wallet {
    wallet: string;
    symbol: string;
    chain: Chains;
    network: Networks;
    precision: number;
    contract: string | undefined;
    provider: string;
    hasWithdrawMemo: boolean;
}
export declare enum Providers {
    FIREBLOCKS = "fireblocks",
    METAL = "metal"
}
export declare type CoinWallet = Exclude<Coin, 'wallets'> & Wallet;
export declare const explorerLinkByChain: {
    Bitcoin: (txid: string) => string;
    "Bitcoin (Testnet)": (txid: string) => string;
    Ethereum: (txid: string) => string;
    "Ethereum (Ropsten)": (txid: string) => string;
    Litecoin: (txid: string) => string;
    "Litecoin (Testnet)": (txid: string) => string;
    "Bitcoin Cash": (txid: string) => string;
    "Bitcoin Cash (Testnet)": (txid: string) => string;
    Stellar: (txid: string) => string;
    "Stellar (Testnet)": (txid: string) => string;
    Proton: (txid: string, traces?: boolean | undefined) => string;
    "Proton (Testnet)": (txid: string, traces?: boolean | undefined) => string;
    Polkadot: (txid: string) => string;
    "Binance (BEP2)": (txid: string) => string;
    "Binance (BEP20)": (txid: string) => string;
    EOS: (txid: string) => string;
    "EOS (Jungle Testnet)": (txid: string) => string;
    "Hedera (Mainnet)": (txid: string) => string;
    "Hedera (Testnet)": (txid: string) => string;
    Dogecoin: (txid: string) => string;
    Cardano: (txid: string) => string;
    "Avalanche X-Chain": (txid: string) => string;
    "Avalanche C-Chain": (txid: string) => string;
    Polygon: (txid: string) => string;
    Terra: (txid: string) => string;
    Ripple: (txid: string) => string;
    Solana: (txid: string) => string;
    "Metal X-Chain (Testnet)": (txid: string) => string;
    "Metal C-Chain (Testnet)": (txid: string) => string;
    "Metal C-Chain": (txid: string) => string;
};
export declare const protonExplorerTxUrl: (chain: string, txId: string, traces?: boolean | undefined) => string;
export declare const initializeCoins: (protonChain: string) => {
    allCoins: Coin[];
    swapCoins: Coin[];
    bridgeCoins: Coin[];
    lendCoins: Coin[];
    borrowCoins: Coin[];
    loanCoins: Coin[];
    allEnabledCoins: Coin[];
};
