import { Asset } from '@bloks/numbers'

export enum Chains {
    BitcoinMainnet     = 'Bitcoin',
    BitcoinTestnet     = 'Bitcoin (Testnet)',
    EthereumMainnet    = 'Ethereum',
    EthereumRopsten    = 'Ethereum (Ropsten)',
    LitecoinMainnet    = 'Litecoin',
    LitecoinTestnet    = 'Litecoin (Testnet)',
    BitcoinCashMainnet = 'Bitcoin Cash',
    BitcoinCashTestnet = 'Bitcoin Cash (Testnet)',
    StellarMainnet     = 'Stellar',
    StellarTestnet     = 'Stellar (Testnet)',
    ProtonMainnet      = 'Proton',
    ProtonTestnet      = 'Proton (Testnet)',
    PolkadotMainnet    = 'Polkadot',
    BinanceBEP2        = 'Binance (BEP2)',
    BinanceBEP20       = 'Binance (BEP20)',
    EosMainnet         = 'EOS',
    EosTestnet         = 'EOS (Jungle Testnet)',
    HederaMainnet      = 'Hedera (Mainnet)',
    HederaTestnet      = 'Hedera (Testnet)',
    DogeMainnet        = 'Dogecoin',
    CardanoMainnet     = 'Cardano',
    AvalancheXChain    = 'Avalanche X-Chain',
    AvalancheCChain    = 'Avalanche C-Chain',
    PolygonMainnet     = 'Polygon',
    TerraMainnet       = 'Terra',
    RippleMainnet      = 'Ripple',
    SolanaMainnet      = 'Solana',
    MetalXTestnet      = 'Metal X-Chain (Testnet)',
    MetalCTestnet      = 'Metal C-Chain (Testnet)',
    MetalCMainnet      = 'Metal C-Chain'
}

export enum Networks {
    Mainnet = 'mainnet',
    Testnet = 'testnet',
    Ropsten = 'ropsten',
    ERC20   = 'erc20',
    BEP20   = 'bep20',
    XLM     = 'xlm',
    AVM     = 'avm',
    EVM     = 'evm',
}

export const similarChains = {
    [Chains.EthereumMainnet]: [Chains.BinanceBEP20],
    [Chains.BinanceBEP20]: [Chains.EthereumMainnet],
}

export interface Coin {
    allowSwap      : boolean;
    allowBridge    : boolean;
    allowLend      : boolean;
    allowBorrow    : boolean;
    name           : string;
    coin           : string;
    xtokenSymbol   : string;
    xtokenPrecision: number;
    xtokenContract : string;
    wallets        : Wallet[];
    image          : string;
    coingeckoId    : string;
    balance?       : Asset;
}
  
export interface Wallet {
    wallet         : string;
    symbol         : string;
    chain          : Chains;
    network        : Networks;
    precision      : number;
    contract       : string | undefined;
    provider       : string;
    hasWithdrawMemo: boolean;
}

export enum Providers {
    FIREBLOCKS = "fireblocks",
    METAL = "metal"
}

export type CoinWallet = Exclude<Coin, 'wallets'> & Wallet

export const explorerLinkByChain = {
    [Chains.BitcoinMainnet]    : (txid: string) => `https://blockchain.com/btc/tx/${txid}`,
    [Chains.BitcoinTestnet]    : (txid: string) => `https://blockstream.info/testnet/tx/${txid}`,
    [Chains.EthereumMainnet]   : (txid: string) => `https://etherscan.io/tx/${txid}`,
    [Chains.EthereumRopsten]   : (txid: string) => `https://ropsten.etherscan.io/tx/${txid}`,
    [Chains.LitecoinMainnet]   : (txid: string) => `https://blockchair.com/litecoin/transaction/${txid}`,
    [Chains.LitecoinTestnet]   : (txid: string) => `https://blockexplorer.one/litecoin/testnet/blockHash/${txid}`,
    [Chains.BitcoinCashMainnet]: (txid: string) => `https://blockchair.com/bitcoin-cash/transaction/${txid}`,
    [Chains.BitcoinCashTestnet]: (txid: string) => `https://blockexplorer.one/bitcoin-cash/testnet/blockHash/${txid}`,
    [Chains.StellarMainnet]    : (txid: string) => `https://blockchair.com/stellar/transaction/${txid}`,
    [Chains.StellarTestnet]    : (txid: string) => `https://testnet.steexp.com/tx/${txid}`,
    [Chains.ProtonMainnet]     : (txid: string, traces?: boolean) => `https://proton.bloks.io/transaction/${txid}${traces ? '?tab=traces' : ''}`,
    [Chains.ProtonTestnet]     : (txid: string, traces?: boolean) => `https://proton-test.bloks.io/transaction/${txid}${traces ? '?tab=traces' : ''}`,
    [Chains.PolkadotMainnet]   : (txid: string) => `https://polkadot.subscan.io/extrinsic/${txid}`,
    [Chains.BinanceBEP2]       : (txid: string) => `https://binance.mintscan.io/txs/${txid}`,
    [Chains.BinanceBEP20]      : (txid: string) => `https://bscscan.com/tx/${txid}`,
    [Chains.EosMainnet]        : (txid: string) => `https://bloks.io/transaction/${txid}`,
    [Chains.EosTestnet]        : (txid: string) => `https://jungle.bloks.io/transaction/${txid}`,
    [Chains.HederaMainnet]     : (txid: string) => `https://app.dragonglass.me/transactions/${txid}`,
    [Chains.HederaTestnet]     : (txid: string) => `https://testnet.dragonglass.me/transactions/${txid}`,
    [Chains.DogeMainnet]       : (txid: string) => `https://blockchair.com/dogecoin/transaction/${txid}`,
    [Chains.CardanoMainnet]    : (txid: string) => `https://explorer.cardano.org/en/transaction?id=${txid}`,
    [Chains.AvalancheXChain]   : (txid: string) => `https://avascan.info/blockchain/x/tx/${txid}`,
    [Chains.AvalancheCChain]   : (txid: string) => `https://snowtrace.io/tx/${txid}`,
    [Chains.PolygonMainnet]    : (txid: string) => `https://polygonscan.com/tx/${txid}`,
    [Chains.TerraMainnet]      : (txid: string) => `https://terra.stake.id/?#/tx/${txid}`,
    [Chains.RippleMainnet]     : (txid: string) => `https://xrpscan.com/tx/${txid}`,
    [Chains.SolanaMainnet]     : (txid: string) => `https://explorer.solana.com/tx/${txid}`,
    [Chains.MetalXTestnet]     : (txid: string) => `https://metalscan.io/tx/${txid}`,
    [Chains.MetalCTestnet]     : (txid: string) => `https://tahoe.metaltrace.io/tx/${txid}`,
    [Chains.MetalCMainnet]     : (txid: string) => `https://metalscan.io/tx/${txid}`,
}

export const protonExplorerTxUrl = (chain: string, txId: string, traces?: boolean) => chain === 'proton'
    ? explorerLinkByChain[Chains.ProtonMainnet](txId, traces)
    : explorerLinkByChain[Chains.ProtonTestnet](txId, traces)

// Initialize.
export const initializeCoins = (protonChain: string): {
    allCoins       : Coin[];
    swapCoins      : Coin[];
    bridgeCoins    : Coin[];
    lendCoins      : Coin[];
    borrowCoins    : Coin[];
    loanCoins      : Coin[];
    allEnabledCoins: Coin[];
} => {
    const IS_MAINNET = protonChain === 'proton'
    const IS_TESTNET = protonChain === 'proton-test'
    
    const coins: Coin[] = [
        {  
            allowSwap: true,
            allowBridge: IS_MAINNET,
            allowLend: true,
            allowBorrow: true,
            name: 'Proton',
            coin: 'XPR',
            xtokenSymbol: 'XPR',
            xtokenPrecision: 4,
            xtokenContract: 'eosio.token',
            wallets: [
                ...(IS_MAINNET ? [
                    {
                        wallet: 'XPR-ERC20',
                        symbol: 'XPR',
                        chain: Chains.EthereumMainnet,
                        network: Networks.ERC20,
                        precision: 4,
                        contract: '0xD7EFB00D12C2C13131FD319336FDF952525DA2AF',
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    },
                    {
                        wallet: 'XPR-BEP20',
                        symbol: 'XPR',
                        chain: Chains.BinanceBEP20,
                        network: Networks.BEP20,
                        precision: 4,
                        contract: '0x5DE3939B2F811A61D830E6F52D13B066881412AB',
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    }
                ]: []),
            ],
            image: 'https://www.proton.org/images/tokens/eosio-tokenXPR.png',
            coingeckoId: 'proton'
        },
        {  
            allowSwap: true,
            allowBridge: true,
            allowLend: true,
            allowBorrow: true,
            name: 'USD Coin',
            coin: 'USDC',
            xtokenSymbol: 'XUSDC',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [
                    {
                        wallet: 'USDC',
                        symbol: 'USDC',
                        chain: Chains.EthereumMainnet,
                        network: Networks.ERC20,
                        precision: 6,
                        contract: '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48',
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    },
                    {
                        wallet: 'USDC-BEP20',
                        symbol: 'USDC',
                        chain: Chains.BinanceBEP20,
                        network: Networks.BEP20,
                        precision: 18,
                        contract: '0x8AC76A51CC950D9822D68B83FE1AD97B32CD580D',
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    },
                    {
                        wallet: 'USDC-XLM',
                        symbol: 'USDC',
                        chain: Chains.StellarMainnet,
                        network: Networks.XLM,
                        precision: 7,
                        contract: undefined,
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: true
                    },
                ]: []),
                ...(IS_TESTNET ? [
                    {
                        wallet: 'USDC',
                        symbol: 'USDC',
                        chain: Chains.EthereumRopsten,
                        network: Networks.Ropsten,
                        precision: 6,
                        contract: '0xA0B86991C6218B36C1D19D4A2E9EB0CE3606EB48',
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    },
                    {
                        wallet: 'USDC-XLM',
                        symbol: 'USDC',
                        chain: Chains.StellarTestnet,
                        network: Networks.XLM,
                        precision: 7,
                        contract: undefined,
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: true
                    },
                ]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXUSDC.png',
            coingeckoId: 'usd-coin'
        },
        {  
            allowSwap: true,
            allowBridge: IS_MAINNET,
            allowLend: true,
            allowBorrow: true,
            name: 'Metal DAO',
            coin: 'MTL',
            xtokenSymbol: 'XMT',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'MTL',
                    symbol: 'MTL',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 8,
                    contract: '0xF433089366899D83A9F26A773D59EC7ECF30355E',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXMT.png',
            coingeckoId: 'metal'
        },
        {  
            allowSwap: true,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'Metal Blockchain',
            coin: 'METAL',
            xtokenSymbol: 'METAL',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_TESTNET ? [{
                    wallet: 'METAL',
                    symbol: 'METAL',
                    chain: Chains.MetalCTestnet,
                    network: Networks.EVM,
                    precision: 18,
                    contract: '',
                    provider: Providers.METAL,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_MAINNET ? [
                    {
                        wallet: 'METAL',
                        symbol: 'METAL',
                        chain: Chains.MetalCMainnet,
                        network: Networks.EVM,
                        precision: 18,
                        contract: '',
                        provider: Providers.METAL,
                        hasWithdrawMemo: false
                    },
                    {
                        wallet: 'METAL',
                        symbol: 'METAL',
                        chain: Chains.EthereumMainnet,
                        network: Networks.ERC20,
                        precision: 18,
                        contract: '',
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    }
                ]: [])
            ],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/metal-chain.png',
            coingeckoId: 'metal-blockchain'
        },
        {  
            allowSwap: true,
            allowBridge: true,
            allowLend: true,
            allowBorrow: true,
            name: 'Bitcoin',
            coin: 'BTC',
            xtokenSymbol: 'XBTC',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'BTC',
                    symbol: 'BTC',
                    chain: Chains.BitcoinMainnet,
                    network: Networks.Mainnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'BTC',
                    symbol: 'BTC',
                    chain: Chains.BitcoinTestnet,
                    network: Networks.Testnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXBTC.png',
            coingeckoId: 'bitcoin'
        },
        {
            allowSwap: true,
            allowBridge: true,
            allowLend: true,
            allowBorrow: true,
            name: 'Ethereum',
            coin: 'ETH',
            xtokenSymbol: 'XETH',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'ETH',
                    symbol: 'ETH',
                    chain: Chains.EthereumMainnet,
                    network: Networks.Mainnet,
                    precision: 18,
                    contract: '0x0000000000000000000000000000000000000000',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'ETH',
                    symbol: 'ETH',
                    chain: Chains.EthereumRopsten,
                    network: Networks.Ropsten,
                    precision: 18,
                    contract: '0x0000000000000000000000000000000000000000',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXETH.png',
            coingeckoId: 'ethereum'
        },
        {  
            allowSwap: true,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Loan',
            coin: 'LOAN',
            xtokenSymbol: 'LOAN',
            xtokenPrecision: 4,
            xtokenContract: 'loan.token',
            wallets: [],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/loan.png',
            coingeckoId: 'proton-loan'
        },
        {  
            allowSwap: true,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'Tether',
            coin: 'USDT',
            xtokenSymbol: 'XUSDT',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'USDT',
                    symbol: 'USDT',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 6,
                    contract: '0xDAC17F958D2EE523A2206206994597C13D831EC7',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_MAINNET ? [{
                    wallet: 'USDT-BEP20',
                    symbol: 'USDT',
                    chain: Chains.BinanceBEP20,
                    network: Networks.BEP20,
                    precision: 18,
                    contract: '0x55d398326f99059fF775485246999027B3197955',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'USDT',
                    symbol: 'USDT',
                    chain: Chains.EthereumRopsten,
                    network: Networks.Ropsten,
                    precision: 6,
                    contract: '0xDAC17F958D2EE523A2206206994597C13D831EC7',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXUSDT.png',
            coingeckoId: 'tether'
        },
        {  
            allowSwap: false,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'TrueUSD',
            coin: 'TUSD',
            xtokenSymbol: 'XTUSD',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'TUSD',
                    symbol: 'TUSD',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 18,
                    contract: '0x0000000000085D4780B73119B644AE5ECD22B376',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXTUSD.png',
            coingeckoId: 'true-usd'
        },
        {  
            allowSwap: false,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Paxos Dollar',
            coin: 'PAX',
            xtokenSymbol: 'XPAX',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'PAX',
                    symbol: 'PAX',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 18,
                    contract: '0x8E870D67F660D95D5BE530380D0EC0BD388289E1',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXPAX.png',
            coingeckoId: 'paxos-standard'
        },
        {  
            allowSwap: false,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'Paxos Gold',
            coin: 'PAXG',
            xtokenSymbol: 'XPAXG',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'PAXG',
                    symbol: 'PAXG',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 18,
                    contract: '0x45804880DE22913DAFE09F4980848ECE6ECBAF78',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'PAXG',
                    symbol: 'PAXG',
                    chain: Chains.EthereumRopsten,
                    network: Networks.Ropsten,
                    precision: 18,
                    contract: '0x45804880DE22913DAFE09F4980848ECE6ECBAF78',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXPAXG.png',
            coingeckoId: 'pax-gold'
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Storex',
            coin: 'STRX',
            xtokenSymbol: 'STRX',
            xtokenPrecision: 4,
            xtokenContract: 'storex',
            wallets: [],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/strx.png',
            coingeckoId: ''
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Mint',
            coin: 'MINT',
            xtokenSymbol: 'MINT',
            xtokenPrecision: 4,
            xtokenContract: 'protonmint',
            wallets: [],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/PMLogo-04.png',
            coingeckoId: ''
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Snipcoins',
            coin: 'SNIPS',
            xtokenSymbol: 'SNIPS',
            xtokenPrecision: 4,
            xtokenContract: 'snipcoins',
            wallets: [],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/snips.png',
            coingeckoId: ''
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'Uniswap',
            coin: 'UNI',
            xtokenSymbol: 'XUNI',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'UNI',
                    symbol: 'UNI',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 18,
                    contract: '0x1F9840A85D5AF5BF1D1762F925BDADDC4201F984',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'UNI',
                    symbol: 'UNI',
                    chain: Chains.EthereumRopsten,
                    network: Networks.Ropsten,
                    precision: 18,
                    contract: '0x1F9840A85D5AF5BF1D1762F925BDADDC4201F984',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXUNI.png',
            coingeckoId: 'uniswap'
        },
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: '1INCH',
            coin: '1INCH',
            xtokenSymbol: 'XINCH',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: '1INCH',
                    symbol: '1INCH',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 18,
                    contract: '0x111111111117DC0AA78B770FA6A738034120C302',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXINCH.png',
            coingeckoId: '1inch'
        },
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Chainlink',
            coin: 'LINK',
            xtokenSymbol: 'XLINK',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'LINK',
                    symbol: 'LINK',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 18,
                    contract: '0x514910771AF9CA656AF840DFF83E8264ECF986CA',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXLINK.png',
            coingeckoId: 'chainlink'
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'Litecoin',
            coin: 'LTC',
            xtokenSymbol: 'XLTC',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'LTC',
                    symbol: 'LTC',
                    chain: Chains.LitecoinMainnet,
                    network: Networks.Mainnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'LTC',
                    symbol: 'LTC',
                    chain: Chains.LitecoinTestnet,
                    network: Networks.Testnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXLTC.png',
            coingeckoId: 'litecoin'
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'Bitcoin Cash',
            coin: 'BCH',
            xtokenSymbol: 'XBCH',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'BCH',
                    symbol: 'BCH',
                    chain: Chains.BitcoinCashMainnet,
                    network: Networks.Mainnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'BCH',
                    symbol: 'BCH',
                    chain: Chains.BitcoinCashTestnet,
                    network: Networks.Testnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXBCH.png',
            coingeckoId: 'bitcoin-cash'
        },
        {  
            allowSwap: true,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'LunarCrush',
            coin: 'LUNR',
            xtokenSymbol: 'XLUNR',
            xtokenPrecision: 4,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'LUNR',
                    symbol: 'LUNR',
                    chain: Chains.EthereumMainnet,
                    network: Networks.ERC20,
                    precision: 4,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
            ],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xlunr.png',
            coingeckoId: 'lunr-token'
        },
        {  
            allowSwap: false,
            allowBridge: IS_TESTNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Stellar',
            coin: 'XLM',
            xtokenSymbol: 'XXLM',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'XLM',
                    symbol: 'XLM',
                    chain: Chains.StellarMainnet,
                    network: Networks.Mainnet,
                    precision: 7,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'XLM',
                    symbol: 'XLM',
                    chain: Chains.StellarTestnet,
                    network: Networks.Testnet,
                    precision: 7,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXXLM.png',
            coingeckoId: 'stellar'
        },
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Sense',
            coin: 'SENSE',
            xtokenSymbol: 'XSENSE',
            xtokenPrecision: 4,
            xtokenContract: 'sense',
            wallets: [],
            image: 'https://www.proton.org/images/tokens/senseXSENSE.png',
            coingeckoId: 'sense'
        },
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Polkadot',
            coin: 'DOT',
            xtokenSymbol: 'XDOT',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'DOT',
                    symbol: 'DOT',
                    chain: Chains.PolkadotMainnet,
                    network: Networks.Mainnet,
                    precision: 10,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXDOT.png',
            coingeckoId: 'polkadot'
        },
        {  
            allowSwap: true,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Binance Coin',
            coin: 'BNB',
            xtokenSymbol: 'XBNB',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'BNB',
                    symbol: 'BNB',
                    chain: Chains.BinanceBEP20,
                    network: Networks.BEP20,
                    precision: 18,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXBNB.png',
            coingeckoId: 'binancecoin'
        },
        {  
            allowSwap: false,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Binance USD',
            coin: 'BUSD',
            xtokenSymbol: 'XBUSD',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'BUSD-BEP20',
                    symbol: 'BUSD',
                    chain: Chains.BinanceBEP20,
                    network: Networks.BEP20,
                    precision: 18,
                    contract: '0xe9e7cea3dedca5984780bafc599bd69add087d56',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xbusd.png',
            coingeckoId: 'binance-usd'
        },
        {  
            allowSwap: true,
            allowBridge: true,
            allowLend: false,
            allowBorrow: false,
            name: 'EOS',
            coin: 'EOS',
            xtokenSymbol: 'XEOS',
            xtokenPrecision: 4,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'EOS',
                    symbol: 'EOS',
                    chain: Chains.EosMainnet,
                    network: Networks.Mainnet,
                    precision: 4,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: []),
                ...(IS_TESTNET ? [{
                    wallet: 'EOS',
                    symbol: 'EOS',
                    chain: Chains.EosTestnet,
                    network: Networks.Testnet,
                    precision: 4,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXEOS.png',
            coingeckoId: 'eos'
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: IS_MAINNET,
            allowLend: true,
            allowBorrow: true,
            name: 'Dogecoin',
            coin: 'DOGE',
            xtokenSymbol: 'XDOGE',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'DOGE',
                    symbol: 'DOGE',
                    chain: Chains.DogeMainnet,
                    network: Networks.Mainnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: []),
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXDOGE.png',
            coingeckoId: 'dogecoin'
        },
        {  
            allowSwap: IS_MAINNET,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Cardano',
            coin: 'ADA',
            xtokenSymbol: 'XADA',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'ADA',
                    symbol: 'ADA',
                    chain: Chains.CardanoMainnet,
                    network: Networks.Mainnet,
                    precision: 6,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXADA.png',
            coingeckoId: 'cardano'
        },

        // Adding
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Terra',
            coin: 'LUNA',
            xtokenSymbol: 'XLUNA',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                // ...(IS_MAINNET ? [{
                //     wallet: 'LUNA',
                //     symbol: 'LUNA',
                //     chain: Chains.TerraMainnet,
                //     network: Networks.Mainnet,
                //     precision: 6,
                //     contract: undefined,
                //     provider: Providers.FIREBLOCKS,
                //     hasWithdrawMemo: true
                // }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXLUNA.png',
            coingeckoId: 'terra-luna'
        },
        {  
            allowSwap: false,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'TerraUSD',
            coin: 'UST',
            xtokenSymbol: 'XUST',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'UST',
                    symbol: 'UST',
                    chain: Chains.TerraMainnet,
                    network: Networks.Mainnet,
                    precision: 6,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXUST.png',
            coingeckoId: 'terrausd'
        },
        {  
            allowSwap: false,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Solana',
            coin: 'SOL',
            xtokenSymbol: 'XSOL',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'SOL',
                    symbol: 'SOL',
                    chain: Chains.SolanaMainnet,
                    network: Networks.Mainnet,
                    precision: 9,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xsol.png',
            coingeckoId: 'solana'
        },
        {  
            allowSwap: false,
            allowBridge: IS_MAINNET,
            allowLend: false,
            allowBorrow: false,
            name: 'Ripple',
            coin: 'XRP',
            xtokenSymbol: 'XXRP',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'XRP',
                    symbol: 'XRP',
                    chain: Chains.RippleMainnet,
                    network: Networks.Mainnet,
                    precision: 6,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: [])
            ],
            image: 'https://raw.githubusercontent.com/eoscafe/eos-airdrops/master/logos/xxrp.png',
            coingeckoId: 'ripple'
        },

        // Future
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Avalanche',
            coin: 'AVAX',
            xtokenSymbol: 'XAVAX',
            xtokenPrecision: 9,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [
                    {
                        wallet: 'AVAX',
                        symbol: 'AVAX',
                        chain: Chains.AvalancheCChain,
                        network: Networks.Mainnet,
                        precision: 9,
                        contract: undefined,
                        provider: Providers.FIREBLOCKS,
                        hasWithdrawMemo: false
                    }
                ]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXAVAX.png',
            coingeckoId: 'avalanche-2'
        },
        {  
            allowSwap: false,
            allowBridge: false,
            allowLend: false,
            allowBorrow: false,
            name: 'Polygon',
            coin: 'MATIC',
            xtokenSymbol: 'XMATIC',
            xtokenPrecision: 8,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_MAINNET ? [{
                    wallet: 'MATIC',
                    symbol: 'MATIC',
                    chain: Chains.PolygonMainnet,
                    network: Networks.Mainnet,
                    precision: 18,
                    contract: '0x0000000000000000000000000000000000000000',
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: false
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXMATIC.png',
            coingeckoId: 'matic-network'
        },
        {  
            allowSwap: false,
            allowBridge: IS_TESTNET,
            allowLend: false,
            allowBorrow: false,
            name: 'HBAR',
            coin: 'HBAR',
            xtokenSymbol: 'XHBAR',
            xtokenPrecision: 6,
            xtokenContract: 'xtokens',
            wallets: [
                ...(IS_TESTNET ? [{
                    wallet: 'HBAR',
                    symbol: 'HBAR',
                    chain: Chains.HederaTestnet,
                    network: Networks.Testnet,
                    precision: 8,
                    contract: undefined,
                    provider: Providers.FIREBLOCKS,
                    hasWithdrawMemo: true
                }]: [])
            ],
            image: 'https://www.proton.org/images/tokens/xtokensXHBAR.png',
            coingeckoId: 'hedera-hashgraph'
        }
    ]

    // Validation
    const walletWithDuplicateChains = coins.find(coin => {
        const chains = coin.wallets.map(wallet => wallet.chain)
        return new Set(chains).size !== chains.length
    })
    if (walletWithDuplicateChains) {
        throw new Error(`Coin ${walletWithDuplicateChains.coin} has duplicate chains in wallet`)
    }

    return {
        allCoins: coins,
        swapCoins: coins.filter(coin => coin.allowSwap),
        bridgeCoins: coins.filter(coin => coin.allowBridge),
        lendCoins: coins.filter(coin => coin.allowLend),
        borrowCoins: coins.filter(coin => coin.allowBorrow),
        loanCoins: coins.filter(coin => coin.allowLend || coin.allowBorrow),
        allEnabledCoins: coins.filter(coin => coin.allowSwap || coin.allowBridge)
    }
}