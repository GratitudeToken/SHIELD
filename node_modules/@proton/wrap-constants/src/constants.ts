import { Coin, CoinWallet, initializeCoins, Wallet } from './coins'

export const WRAP_CONTRACT = 'proton.wrap'
export const WRAP_AUTH_ACTION = 'generateauth'
export const FEE_FACTOR = 10000

export const initializeConstants = (chain: string) => {
    const { swapCoins, bridgeCoins, allEnabledCoins, allCoins, lendCoins, borrowCoins, loanCoins } = initializeCoins(chain)

    const constants = {
        SWAP_CONTRACT: 'proton.swaps',
        DEX_CONTRACT: 'dex',    
        FEE_FACTOR,
        GOOGLE_MAPS_KEY: 'AIzaSyDb2_CrK032kSIqBXbkdwmaLKWELl0SxVs',
        SWAP_URL: chain === 'proton'
            ? 'https://otc.protonswap.com'
            : 'https://otc-test.protonswap.com',
        WRAP_SERVER_URL: chain === 'proton'
            ? 'https://www.api.bloks.io/proton-wrap-public2'
            : 'https://www.api.bloks.io/proton-wrap-testnet-public2',
        WRAP_CONTRACT,
        WRAP_ACTIONS: {
            SAVE_ADDRESS: 'saveaddress2',
            DELETE_ADDRESS: 'deladdress2',
            WRAP_START: 'wrapstart2',
            WRAP_FINISH: 'wrapfinish2',
            WRAP_PROCESS: 'wrapprocess2',
            WRAP_SET_CONF: 'wrapsetconf2',
        },
        WRAP_TABLES: {
            ADDRESSES: 'addresses2',
            WRAPS: 'wraps2'
        },
        ADDRESSES_INDEXES: {
            BY_ACCOUNT: 2,
            BY_ADDR_HASH: 3
        },
        WRAPS_INDEXES: {
            BY_ACCOUNT: 2,
            BY_STATUS: 3,
            BY_WRAP_HASH: 4
        },
        WRAP_PROCESS_TIMER: 5000,

        FARM_CONTRACT: 'yield.farms',

        WEBHOOK_PERMISSION: 'webhook',
        PUBLIC_PERMISSION: 'public',
        LIGHT_PERMISSION: 'light',
        WRAP_AUTH_ACTION: WRAP_AUTH_ACTION,

        METAL_ENDPOINT: chain === 'proton'
            ? 'https://cirrus.metalpay.com'
            : 'https://cirrus-dev.metalpay.com',

        METAL_PROTON_ENDPOINT: chain === 'proton'
            ? 'https://api.protonchain.com'
            : 'https://api-dev.protonchain.com',

        METAL_DEX_HTTP_ENDPOINT: chain === 'proton'
            ? 'https://metallicus-dbapi-dev01.binfra.one/dex'
            : 'https://metallicus-dbapi-dev01.binfra.one/dex',

        METAL_DEX_WS_ENDPOINT: chain === 'proton'
            ? 'wss://metallicus-dbapi-dev01.binfra.one/dexws'
            : 'wss://metallicus-dbapi-dev01.binfra.one/dexws',

        PROTON_ENDPOINTS: chain === 'proton'
            ? ['https://metal-proton-rpc.global.binfra.one', 'https://proton.greymass.com', 'https://proton.eoscafeblock.com', 'https://proton.cryptolions.io', 'https://proton.eosusa.news']
            : ['https://metal-protontest-rpc.global.binfra.one', 'https://testnet.protonchain.com'],

        CHAIN_ID: chain === 'proton'
            ? '384da888112027f0321850a169f737c33e53b388aad48b5adace4bab97f437e0'
            : '71ee83bcf52142d61019d95f9cc5427ba6a0d7ff8accd9e2088ae2abeaf3d3dd',

        DEX_PROCESS_SIZE: 30,
        DEX_SLTPPROCESS_SIZE: 10,
        MAX_PRICE: "9223372036854775806",
        MIN_PRICE: 1,

        CHAIN: chain,

        SWAP_COINS: swapCoins,
        BRIDGE_COINS: bridgeCoins,
        ALL_ENABLED_COINS: allEnabledCoins,
        LEND_COINS: lendCoins,
        BORROW_COINS: borrowCoins,
        LOAN_COINS: loanCoins,
        ALL_COINS: allCoins,

        findBridgeCoinWalletByXtokenAndChain (xtokenSymbol: string, chain: string): CoinWallet | undefined {
            const bridgeCoin = constants.BRIDGE_COINS.find((bridgeCoin: Coin) => bridgeCoin.xtokenSymbol === xtokenSymbol)
            if (!bridgeCoin) return undefined
            const bridgeWallet = bridgeCoin.wallets.find((bridgeWallet: Wallet) => bridgeWallet.chain === chain)
            if (!bridgeWallet) return undefined

            return {
                ...bridgeCoin,
                ...bridgeWallet
            }
        },

        findBridgeCoinWallet (coin: string, wallet: string): CoinWallet | undefined {
            const bridgeCoin = constants.BRIDGE_COINS.find((bridgeCoin: Coin) => bridgeCoin.coin === coin)
            if (!bridgeCoin) return undefined

            const bridgeWallet = bridgeCoin.wallets.find((bridgeWallet: Wallet) => bridgeWallet.wallet === wallet)
            if (!bridgeWallet) return undefined

            return {
                ...bridgeCoin,
                ...bridgeWallet
            }
        },

        findBridgeCoinNetwork (coin: string, network: string): CoinWallet | undefined {
            const bridgeCoin = constants.BRIDGE_COINS.find((bridgeCoin: Coin) => bridgeCoin.coin === coin)
            if (!bridgeCoin) return undefined
            const bridgeWallet = bridgeCoin.wallets.find((bridgeWallet: Wallet) => bridgeWallet.network === network)
            if (!bridgeWallet) return undefined

            return {
                ...bridgeCoin,
                ...bridgeWallet
            }
        }
    }

    return constants
}