import * as z from 'zod'
import { singleActionTransactionParser } from './actions'
import { authorizationParser } from './base'
import { WRAP_CONTRACT } from '../constants'
import { baseActionParser } from './actions'

const withdrawData = {
    from: z.string().refine((val) => val !== WRAP_CONTRACT, {
        message: `${WRAP_CONTRACT} must be receiver`,
    }),
    to: z.literal(WRAP_CONTRACT),
    quantity: z.string(),
    memo: z.string()
}
const withdrawBodyBaseAction = baseActionParser('*', 'transfer', withdrawData)
export type WithdrawBodyBaseAction = z.infer<typeof withdrawBodyBaseAction>

export const withdrawBodyParser = z.object({
    signer     : authorizationParser,
    signatures : z.array(z.string()).length(1),
    transaction: singleActionTransactionParser('*', 'transfer', withdrawData),
    quoteId: z.string(),
    provider: z.string().optional()
})
export type WithdrawBody = z.infer<typeof withdrawBodyParser>

export const withdrawMetalResponseParser = z.object({
    success: z.boolean(),
    id     : z.string(),
})
export type WithdrawMetalResponse = z.infer<typeof withdrawMetalResponseParser>

export const withdrawalFeeQuoteParser = z.object({
    quoteId     : z.string(),
    estimatedFee: z.string(),
    currency    : z.string(),
    network     : z.string(),
})
export type WithdrawalFeeQuote = z.infer<typeof withdrawalFeeQuoteParser>