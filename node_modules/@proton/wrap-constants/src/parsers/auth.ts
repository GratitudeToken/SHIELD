import * as z from 'zod';
import { baseActionParser, singleActionTransactionParser } from './actions'
import { authorizationParser } from './base'
import { WRAP_CONTRACT, WRAP_AUTH_ACTION } from '../constants'

export const createAbstractAuthParser = (contract: string, action: string, data: z.ZodRawShape) => {
    return z.object({
        signer     : authorizationParser,
        signatures : z.array(z.string()).length(1),
        transaction: singleActionTransactionParser(contract, action, data)
    })
}

const generateAuthData = {
    time: z.string(),
    protonAccount: z.string()
}
const generateAuthActionsBaseParser = baseActionParser(WRAP_CONTRACT, WRAP_AUTH_ACTION, generateAuthData)
export type GenerateAuthBaseAction = z.infer<typeof generateAuthActionsBaseParser>

export const generateAuthParser = createAbstractAuthParser(WRAP_CONTRACT, WRAP_AUTH_ACTION, generateAuthData)
export type GenerateAuth = z.infer<typeof generateAuthParser>