import * as z from 'zod';
import { accountParser, authorizationsParser } from './base'

const actionParser = z.object({
    account: z.string(),
    name: z.string(),
    authorization: z.array(
        z.object({
            actor: z.string(),
            permission: z.string(),
        })
    ),
    data: z.any(),
    hex_data: z.string().optional()
})

const transactionExtensionsParser = z.array(z.number().or(z.string())).optional()

const rawTransactionParser = z.object({
    expiration            : z.string(),
    ref_block_num         : z.number(),
    ref_block_prefix      : z.number(),
    max_net_usage_words   : z.number(),
    max_cpu_usage_ms      : z.number(),
    delay_sec             : z.number(),
    context_free_actions  : z.array(actionParser),
    transaction_extensions: z.array(transactionExtensionsParser)
})

export const baseActionParser = <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.object({
    account: contract === '*' ? accountParser : z.literal(contract),
    name: z.literal(action),
    data: z.object(data),
    authorization: authorizationsParser
})

export const baseActionSerializedParser = <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.object({
    account: contract === '*' ? accountParser : z.literal(contract),
    name: z.literal(action),
    data: z.string().or(z.object(data)),
    authorization: authorizationsParser
})

export const webauthActionParser = <T extends z.ZodRawShape>(contract: string, action: string, data: T) => z.object({
    account: z.literal('webauthn'),
    name: z.literal('exec'),
    data: z.object({
        account: accountParser,
        key: z.object({
            key: z.array(z.string().or(z.object({
                modulus: z.string(),
                exponent: z.string()
            }))),
            user_presence: z.number(),
            rpid: z.string()
        }),
        nonce: z.number(),
        permissions: authorizationsParser,
        signature: z.object({
            auth_data: z.string(),
            client_json: z.string(),
            signature: z.string()
        }),
        trx: rawTransactionParser.merge(
            z.object({
                actions: z.array(
                    baseActionSerializedParser(contract, action, data)
                ).length(1)
            })
        )
    }),
    authorization: authorizationsParser
})

export const singleActionTransactionParser = <T extends z.ZodRawShape>(contract: string, action: string, data: T) => {
    const baseAction = baseActionParser(contract, action, data)
    const webauthAction = webauthActionParser(contract, action, data)

    return rawTransactionParser.merge(z.object({
        actions: z.array(baseAction.or(webauthAction)).length(1)
    }))
}