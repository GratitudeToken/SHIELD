"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpc = void 0;
var endpoints_1 = require("./endpoints");
var rpcerror_1 = require("./rpcerror");
var cross_fetch_1 = __importDefault(require("cross-fetch"));
function queryParams(params) {
    var entries = [];
    for (var _i = 0, _a = Object.keys(params); _i < _a.length; _i++) {
        var key = _a[_i];
        var value = params[key];
        if (value !== undefined) {
            entries.push(encodeURIComponent(key) + "=" + encodeURIComponent(value));
        }
    }
    return entries.join("&");
}
function fetchWithTimeout(resource, options) {
    return __awaiter(this, void 0, void 0, function () {
        var timeout, controller, id, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    timeout = options.timeout;
                    controller = new AbortController();
                    id = setTimeout(function () { return controller.abort(); }, timeout);
                    return [4 /*yield*/, (0, cross_fetch_1.default)(resource, __assign(__assign({}, (options || {})), { signal: controller.signal }))];
                case 1:
                    response = _a.sent();
                    clearTimeout(id);
                    return [2 /*return*/, response];
            }
        });
    });
}
/**
 * JsonRpc
 *
 * @param {string} endpoint hyperion endpoint
 * @example
 *
 * const endpoint = "https://br.eosrio.io"
 * const rpc = new JsonRpc(endpoint, { fetch })
 */
var JsonRpc = /** @class */ (function () {
    function JsonRpc(endpoint, args) {
        if (args === void 0) { args = {}; }
        this.timeout = 8000;
        this.endpoint = endpoint;
        if (args.timeout) {
            this.timeout = args.timeout;
        }
    }
    /**
     * post
     *
     * POST `body` to `endpoint + path`.
     * Throws detailed error information in `RpcError` when available.
     *
     * @private
     */
    JsonRpc.prototype.post = function (path, body) {
        return __awaiter(this, void 0, void 0, function () {
            var response, json, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 4]);
                        return [4 /*yield*/, fetchWithTimeout(this.endpoint + path, {
                                body: JSON.stringify(body),
                                method: "POST",
                                timeout: this.timeout
                            })];
                    case 1:
                        response = _a.sent();
                        return [4 /*yield*/, response.json()];
                    case 2:
                        json = _a.sent();
                        if (json.processed && json.processed.except) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [3 /*break*/, 4];
                    case 3:
                        e_1 = _a.sent();
                        e_1.isFetchError = true;
                        throw e_1;
                    case 4:
                        if (!response.ok) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * get
     *
     * GET `params` to `endpoint + path`.
     * Throws detailed error information in `RpcError` when available.
     *
     * @private
     */
    JsonRpc.prototype.get = function (path, params) {
        return __awaiter(this, void 0, void 0, function () {
            var response, json, url, e_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = this.endpoint + path + "?" + queryParams(params);
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetchWithTimeout(url, {
                                method: "GET",
                                timeout: this.timeout
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new rpcerror_1.RpcStatusError(response);
                        }
                        return [4 /*yield*/, response.json()];
                    case 3:
                        json = _a.sent();
                        if (json.processed && json.processed.except) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_2 = _a.sent();
                        e_2.isFetchError = true;
                        throw e_2;
                    case 5:
                        if (!response.ok) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * [GET /v2/state/alive](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_alive)
     *
     * simple server healthcheck
     *
     * @returns {Promise<Alive>} alive
     * @example
     *
     * const response = await rpc.alive();
     * console.log(response);
     * // => {"status": "OK"}
     */
    JsonRpc.prototype.alive = function () {
        return this.get(endpoints_1.V2_ALIVE, {});
    };
    /**
     * [GET /v2/history/get_abi_snapshot](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_abi_snapshot)
     *
     * fetch contract abi at specific block
     *
     * @param {string} contract contract account
     * @param {number} number target block
     * @returns {Promise<GetAbiSnapshot>} abi snapshot
     * @example
     *
     * const response = await rpc.get_abi_snapshot("eosio", 200);
     * console.log(response.version);
     * // => "eosio::abi/1.0"
     *
     * for (const table of response.tables) {
     *     console.log(table);
     *     // => { name: 'producers', index_type: 'i64', key_names: [ 'owner' ], key_types: [ 'uint64' ], type: 'producer_info' }
     * }
     */
    JsonRpc.prototype.get_abi_snapshot = function (contract, block) {
        var params = {
            contract: contract,
            block: block,
        };
        return this.get(endpoints_1.V2_GET_ABI_SNAPSHOT, params);
    };
    /**
     * [GET /v2/state/get_voters](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_voters)
     *
     * get voters
     *
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.producer] filter by voted producer (comma separated)
     * @param {boolean} [options.proxy] true or false
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @returns {Promise<GetVoters>} voters
     * @example
     *
     * const response = await rpc.get_voters({ producer: "eoscafeblock", limit: 100 });
     * console.log(response.voters);
     * // => "[{
     * //   "account": "guzdkmrtgage",
     * //   "weight": 78434695236505280,
     * //   "last_vote": 64804768
     * // }]"
     */
    JsonRpc.prototype.get_voters = function (options) {
        return this.get(endpoints_1.V2_GET_VOTERS, options);
    };
    /**
     * [GET /v2/state/get_links](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_links)
     *
     * get voters
     *
     * @param {string} [account] account to get links for
     * @returns {Promise<GetLinks>} links
     * @example
     *
     * const response = await rpc.get_links("eoscafeblock");
     * console.log(response.links);
     * // => "[{
     * "block_num":26088072,
     * "timestamp":"2019-11-22T23:17:42.000",
     * "account":"eosriobrazil",
     * "permission":"claim2",
     * "code":"eosio",
     * "action":"voteproducer"
     * }]"
     */
    JsonRpc.prototype.get_links = function (account) {
        return this.get(endpoints_1.V2_GET_LINKS, { account: account });
    };
    /**
     * [GET /v2/state/get_proposals](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_proposals)
     *
     * get proposals
     *
     * @param {string} [account] account to get proposals for
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.proposer] filter by proposer
     * @param {string} [options.proposal] filter by proposal name
     * @param {string} [options.account] filter by either requested or provided account
     * @param {string} [options.requested] filter by requested account
     * @param {string} [options.provided] filter by provided account
     * @param {string} [options.track] total results to track (count) [number or true]
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @returns {Promise<GetProposals>} proposals
     */
    JsonRpc.prototype.get_proposals = function (options) {
        return this.get(endpoints_1.V2_GET_PROPOSALS, options);
    };
    /**
     * [GET /v2/history/get_actions](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_actions)
     *
     * get actions based on notified account
     *
     * @param {string} account notified account
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.filter] code::name filter
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @param {string} [options.sort] sort direction
     * @param {string} [options.after] filter after specified date (ISO8601)
     * @param {string} [options.before] filter before specified date (ISO8601)
     * @param {string} [options.transfer_to] transfer filter to
     * @param {string} [options.transfer_from]  transfer filter from
     * @param {string} [options.transfer_symbol]  transfer filter symbol
     * @param {string} [options.act_name]  act name
     * @param {string} [options.act_account]  act account
     * @returns {Promise<GetActions>} get actions
     * @example
     *
     * const response = await rpc.get_actions("eoscafeblock", {
     *     filter: "eosio.token:*",
     *     skip: 100,
     *     limit: 100,
     * });
     *
     * for (const action of response.actions) {
     *     console.log(action);
     *     // => { act: { account: 'eosio.token', name: 'transfer', ... } }
     * }
     */
    JsonRpc.prototype.get_actions = function (account, options) {
        if (options === void 0) { options = {}; }
        var params = Object.assign({}, { account: account }, options);
        return this.get(endpoints_1.V2_GET_ACTIONS, params);
    };
    /**
     * [GET /v2/history/get_created_accounts](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_created_accounts)
     *
     * get created accounts
     *
     * @param {string} account created account
     * @returns {Promise<GetCreatedAccounts>} get creator
     * @example
     *
     * const response = await rpc.get_created_accounts("eosnationftw");
     * console.log(response);
     * // => {"accounts": [{"name":"eosnationdsp","trx_id":"728d4a4da36a98d9048080461dacaf975ad083e8158ef84edea60cc755ab2c1a","timestamp":"2019-02-28T22:36:45.000"}, ... ]}
     */
    JsonRpc.prototype.get_created_accounts = function (account) {
        var params = {
            account: account,
        };
        return this.get(endpoints_1.V2_GET_CREATED_ACCOUNTS, params);
    };
    /**
     * [GET /v2/history/get_creator](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_creator)
     *
     * get creator
     *
     * @param {string} account created account
     * @returns {Promise<GetCreator>} get creator
     * @example
     *
     * const response = await rpc.get_creator("eosnationftw");
     * console.log(response);
     * // => { account: 'eosnationftw', creator: 'gyztcmrvgqge', timestamp: '2018-06-10T13:06:43.500', ... }
     */
    JsonRpc.prototype.get_creator = function (account) {
        var params = {
            account: account,
        };
        return this.get(endpoints_1.V2_GET_CREATOR, params);
    };
    /**
     * [GET /v2/history/get_deltas](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_deltas)
     *
     * get deltas
     *
     * @param {string} code contract account
     * @param {string} scope table scope
     * @param {string} table table name
     * @param {string} payer payer account
     * @returns {Promise<GetDeltas>} get deltas
     * @example
     *
     * const response = await rpc.get_deltas("eosio.token", "eosnationftw", "accounts", "eosnationftw");
     * console.log(response);
     * // => { "query_time": 19, "total": { "value": 486, "relation": "eq" }, "deltas": [ ... ] }
     */
    JsonRpc.prototype.get_deltas = function (code, scope, table, payer, options) {
        var params = Object.assign({}, options, {
            code: code,
            scope: scope,
            table: table,
            payer: payer,
        });
        return this.get(endpoints_1.V2_GET_DELTAS, params);
    };
    /**
     * [GET/v2/state/get_key_accounts](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_key_accounts)
     *
     * get account by public key
     *
     * @param {string} public_key Contract account targeted by the action.
     * @returns {Promise<GetKeyAccounts>} key accounts
     * @example
     *
     * const response = await rpc.get_key_accounts("EOS5Mto3Km6BCVxowb6LkkFaT9oaUwLVgswgcxvY4Qgc4rhHry4Tv");
     * console.log(response.account_names);
     * // => [ 'eoscafeblock' ]
     */
    JsonRpc.prototype.get_key_accounts = function (public_key) {
        var params = {
            public_key: public_key,
        };
        return this.get(endpoints_1.V2_GET_KEY_ACCOUNTS, params);
    };
    /**
     * [GET /v2/state/get_tokens](https://eos.hyperion.eosrio.io/v2/docs/index.html#/state/get_v2_state_get_tokens)
     *
     * get tokens
     *
     * @param {string} account account
     * @returns {Promise<GetTokens>} get tokens
     * @example
     *
     * const response = await rpc.get_tokens("eosnationftw");
     * for (const token of response.tokens) {
     *     console.log(token);
     *     // => { symbol: 'ZOS', precision: 4, amount: 140, contract: 'zosdiscounts' }
     * }
     */
    JsonRpc.prototype.get_tokens = function (account) {
        var params = {
            account: account,
        };
        return this.get(endpoints_1.V2_GET_TOKENS, params);
    };
    /**
     * [GET /v2/history/get_transacted_accounts](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_transacted_accounts)
     *
     * get all account that interacted with the source account provided
     *
     * @param {string} account source account
     * @param {string} direction search direction (in, out or both)
     * @returns {Promise<GetTransactedAccounts>} transacted accounts
     * @example
     *
     * const response = await rpc.get_transacted_accounts("eoscafeblock", "in");
     * console.log(response);
     * // => { query_time: 268, account: 'eoscafeblock', total_in: 1092369.1827, inputs: [ ... ] }
     */
    JsonRpc.prototype.get_transacted_accounts = function (account, direction, options) {
        if (options === void 0) { options = {}; }
        var params = Object.assign({}, { account: account, direction: direction }, options);
        return this.get(endpoints_1.V2_GET_TRANSACTED_ACCOUNTS, params);
    };
    /**
     * [GET /v2/history/get_transaction](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_transaction)
     *
     * get all actions belonging to the same transaction
     *
     * @param {string} id transaction id
     * @returns {Promise<GetTransaction>} transaction
     * @example
     *
     * const response = await rpc.get_transaction("42dacd5722001b734be46a2140917e06cd21d42425f927f506c07b4388b07f62");
     * for (const action of response.actions) {
     *     console.log(action);
     *     // => { act: { account: 'eosio', name: 'buyrambytes', ... }}
     * }
     */
    JsonRpc.prototype.get_transaction = function (id) {
        var params = {
            id: id,
        };
        return this.get(endpoints_1.V2_GET_TRANSACTION, params);
    };
    /**
     * [GET /v2/history/get_transfers](https://eos.hyperion.eosrio.io/v2/docs/index.html#/history/get_v2_history_get_transfers)
     *
     * get token transfers utilizing the eosio.token standard
     *
     * @param {object} [options={}] Optional parameters
     * @param {string} [options.from] source account
     * @param {string} [options.to] destination account
     * @param {string} [options.symbol] token symbol
     * @param {string} [options.contract] token contract
     * @param {number} [options.skip] skip [n] actions (pagination)
     * @param {number} [options.limit] limit of [n] actions per page
     * @param {string} [options.after] filter after specified date (ISO8601)
     * @param {string} [options.before] filter before specified date (ISO8601)
     * @returns {Promise<GetTransfers>} transfers
     * @example
     *
     * const response = await rpc.get_transfers({to: "eosnewyorkio"});
     * for (const action of response.actions) {
     *     console.log(action.act.data);
     *     // => { from: 'eosio.bpay', to: 'eosnewyorkio', amount: 326.524, symbol: 'EOS', memo: 'producer block pay' }
     * }
     */
    JsonRpc.prototype.get_transfers = function (options) {
        if (options === void 0) { options = {}; }
        var params = Object.assign({}, options);
        return this.get(endpoints_1.V2_GET_TRANSFERS, params);
    };
    return JsonRpc;
}());
exports.JsonRpc = JsonRpc;
//# sourceMappingURL=jsonrpc.js.map