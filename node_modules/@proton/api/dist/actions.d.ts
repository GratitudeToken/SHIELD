import type { ApiClass } from './index';
export declare function getActionsFromNative(this: ApiClass, accountName: string, actionSkip: number, actionsPerPage: number, historyType?: string): Promise<import("@bloks/utils").GetActionsNativeResult | never[]>;
export declare function getActions(this: ApiClass, accountName: string, historyType: string, { actionsPerPage, actionSkip, sortDirection, dfuseCursorStack, tokenFilter, actionFilters, contractFilter, actionFilter, start, end }?: {
    actionsPerPage: number;
    actionSkip: number;
    sortDirection: string;
    dfuseCursorStack: string[];
    tokenFilter: any;
    actionFilters: any;
    contractFilter: string;
    actionFilter: string;
    start?: string | undefined;
    end: string | undefined;
}): Promise<import("@bloks/utils").GetActionsNativeResult | never[] | {
    cursor: string;
    actions: any[];
    numOfTxLoaded: number;
} | {
    lib: number;
    actions: {
        action_trace: import("@bloks/utils").Action;
    }[];
    query_time: number;
    numOfTxLoaded: number;
    total: {
        relation: string;
        value: number;
    };
}>;
export declare function getActionsFromDfuse(this: ApiClass, accountName: string, { before, after, limit, cursor, query, direction, tokenFilter, actionFilters, contractFilter, actionFilter, type }?: {
    before: string | undefined;
    after: string | undefined;
    limit: number;
    cursor: string;
    query: string;
    direction: string;
    tokenFilter: any;
    actionFilters: any;
    contractFilter: string;
    actionFilter: string;
    type?: string | undefined;
}): Promise<{
    cursor: string;
    actions: any[];
    numOfTxLoaded: number;
}>;
export declare function getActionsFromHyperion(this: ApiClass, account: string, { skip, limit, sort, after, before, filter, tokenFilter, actionFilters, contractFilter, actionFilter, }?: {
    skip: number;
    limit: number;
    sort: string;
    after?: string | undefined;
    before?: string | undefined;
    filter?: string | undefined;
    tokenFilter?: any;
    actionFilters?: any;
    contractFilter?: string | undefined;
    actionFilter?: string | undefined;
}): Promise<{
    lib: number;
    actions: {
        action_trace: import("@bloks/utils").Action;
    }[];
    query_time: number;
    numOfTxLoaded: number;
    total: {
        relation: string;
        value: number;
    };
}>;
