import * as z from 'zod';
import { chainInfoParser } from '../proton';
export interface Country {
    id: string;
    name: string;
    region: string;
    active: boolean;
    localCurrency: string;
}
export interface CountryOption {
    key: string;
    value: string;
    flag: string;
    text: string;
}
export interface ApplyForKycParams {
    chain: string;
    actor: string;
    permission: string;
    transaction: any;
    signatures: string[];
    chainId: string;
}
export interface KycApplyResponse {
    id: string;
    chainAccount: string;
    status: string;
    tier: number;
    created: Date;
    updated: Date;
}
export interface KycIpInfo {
    ip: string;
    type: string;
    continent_code: string;
    continent_name: string;
    country_code: string;
    country_name: string;
    region_code: string;
    region_name: string;
    city: string;
    zip: string;
    latitude: number;
    longitude: number;
    location: {
        geoname_id: number;
        capital: string;
        languages: {
            code: string;
            name: string;
            native: string;
        }[];
        country_flag: string;
        country_flag_emoji: string;
        country_flag_emoji_unicode: string;
        calling_code: string;
        is_eu: boolean;
    };
    time_zone: {
        id: string;
        current_time: Date;
        gmt_offset: number;
        code: string;
        is_daylight_saving: boolean;
    };
    currency: {
        code: string;
        name: string;
        plural: string;
        symbol: string;
        symbol_native: string;
    };
    connection: {
        asn: number;
        isp: string;
    };
}
export declare enum KycStatus {
    FAILED = "FAILED",
    UNSUBMITTED = "UNSUBMITTED",
    PENDING = "PENDING",
    PASSED = "PASSED"
}
export declare type KycStatusResponse = {
    tier: string;
    status: KycStatus;
}[];
export declare type FeatureResponse = "TRUE" | "FALSE" | "NEEDS_KYC";
export interface AvailableFeatures {
    fiat: FeatureResponse;
    swap: FeatureResponse;
    loan: FeatureResponse;
    bridge: FeatureResponse;
}
export interface CreateAccountParams {
    email: string;
    name: string;
    chainAccount: string;
    activePublicKey: string;
    ownerPublicKey: string;
    verificationCode?: string;
}
export interface CreateOrLoginAccountResponse {
    id: string;
    token: string;
    refreshToken: string;
    expiresAt: number;
    createdAt: number;
    updatedAt: number;
    user: {
        id: string;
        email: string;
        emailVerified: boolean;
        chainAccount: string;
        status: string;
        createdAt: number;
        updatedAt: number;
    };
}
export interface CreateOrLoginAccountResponseError {
    error: string;
    message: string;
}
export interface LoginAccountParams {
    chainAccount: string;
    signature: string;
    email?: string;
    verificationCode?: string;
}
export declare type IChainInfo = z.infer<typeof chainInfoParser>;
export interface OraclePoint {
    d_string: string | null;
    d_uint64_t: string | number | null;
    d_double: string | null;
}
export interface OracleRow {
    feed_index: number;
    aggregate: {
        d_string: string | null;
        d_uint64_t: string | number | null;
        d_double: string | null;
    };
    points: Array<{
        provider: string;
        time: string;
        data: OraclePoint;
    }>;
}
