"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JsonRpc = void 0;
var endpoints_1 = require("./endpoints");
var rpcerror_1 = require("./rpcerror");
var cross_fetch_1 = __importDefault(require("cross-fetch"));
var jsonrpc2_ws_1 = require("jsonrpc2-ws");
var chainToEndpoint = {
    eos: "https://api.light.xeos.me",
    telos: "https://api.light.xeos.me",
    jungle: "https://lightapi.eosgeneva.io",
    bos: "https://lightapi.eosamsterdam.net",
    instar: "https://lightapi.eosamsterdam.net",
    proton: "https://proton.light-api.net",
    wax: "https://lightapi.eosamsterdam.net",
    worbli: "https://lightapi.eosamsterdam.net",
    xec: "https://lightapi.eosamsterdam.net",
    protontest: "https://testnet-lightapi.eosams.xeos.me",
    telostest: "https://testnet-lightapi.eosams.xeos.me",
    waxtest: "https://testnet-lightapi.eosams.xeos.me",
    coffe: "https://hyperion.coffe.io",
};
function fetchWithTimeout(resource, options) {
    return __awaiter(this, void 0, void 0, function () {
        var timeout, controller, id, response;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    timeout = options.timeout;
                    controller = new AbortController();
                    id = setTimeout(function () { return controller.abort(); }, timeout);
                    return [4 /*yield*/, (0, cross_fetch_1.default)(resource, __assign(__assign({}, (options || {})), { signal: controller.signal }))];
                case 1:
                    response = _a.sent();
                    clearTimeout(id);
                    return [2 /*return*/, response];
            }
        });
    });
}
/**
 * JsonRpc
 *
 * @param {string} endpoint LIGHT API endpoint
 * @example
 *
 * const rpc = new JsonRpc("proton")
 */
var JsonRpc = /** @class */ (function () {
    function JsonRpc(chain, args) {
        if (args === void 0) { args = {}; }
        this.timeout = 5000;
        this.wsRequestId = 100;
        this.chain = chain;
        this.endpoint = args.endpoint || chainToEndpoint[chain];
        this.wsClient = new jsonrpc2_ws_1.Client(this.endpoint.replace('https:', 'wss:') + '/wsapi');
        if (!this.endpoint) {
            throw new Error("Chain ".concat(chain, " does not have a default endpoint, provide one in args"));
        }
        if (args.timeout) {
            this.timeout = args.timeout;
        }
    }
    /**
     * get
     *
     * GET `params` to `endpoint + path`.
     * Throws detailed error information in `RpcError` when available.
     *
     * @private
     */
    JsonRpc.prototype.get = function (path, endpoint) {
        if (endpoint === void 0) { endpoint = this.endpoint; }
        return __awaiter(this, void 0, void 0, function () {
            var response, json, url, text, e_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        url = endpoint + path;
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 4, , 5]);
                        return [4 /*yield*/, fetchWithTimeout(url, {
                                method: "GET",
                                timeout: this.timeout,
                            })];
                    case 2:
                        response = _a.sent();
                        if (response.status !== 200) {
                            throw new rpcerror_1.RpcStatusError(response);
                        }
                        return [4 /*yield*/, response.text()];
                    case 3:
                        text = _a.sent();
                        try {
                            json = JSON.parse(text);
                            if (json.processed && json.processed.except) {
                                throw new rpcerror_1.RpcError(json);
                            }
                        }
                        catch (_b) {
                            json = text;
                        }
                        return [3 /*break*/, 5];
                    case 4:
                        e_1 = _a.sent();
                        e_1.isFetchError = true;
                        throw e_1;
                    case 5:
                        if (!response.ok) {
                            throw new rpcerror_1.RpcError(json);
                        }
                        return [2 /*return*/, json];
                }
            });
        });
    };
    /**
     * [GET /api/account]
     *
     * Retrieve all token balances, resources and authorization information for an account:
     *
     * @param {string} accountName name of account
     * @returns {Promise<GetAccount>} account
     */
    JsonRpc.prototype.get_account = function (accountName) {
        var url = "".concat(endpoints_1.GET_ACCOUNT, "/").concat(this.chain, "/").concat(accountName);
        return this.get(url);
    };
    /**
     * [GET /api/accinfo]
     *
     * Retrieve all resources and authorization information for an account:
     *
     * @param {string} accountName name of account
     * @returns {Promise<GetAccountInfo>} account
     */
    JsonRpc.prototype.get_account_info = function (accountName) {
        var url = "".concat(endpoints_1.GET_ACCOUNT_INFO, "/").concat(this.chain, "/").concat(accountName);
        return this.get(url);
    };
    /**
     * [GET /api/balances]
     *
     * Retrieve only token balances for an account
     *
     * @param {string} accountName name of account
     * @returns {Promise<GetBalances>} balances
     */
    JsonRpc.prototype.get_balances = function (accountName) {
        var url = "".concat(endpoints_1.GET_BALANCES, "/").concat(this.chain, "/").concat(accountName);
        return this.get(url);
    };
    /**
     * [GET /api/key]
     *
     * Retrieve all accounts in all known EOS networks dependent on a public key:
     *
     * @param {string} key public key
     * @returns {Promise<GetKeyAccounts[]>} accounts per network
     */
    JsonRpc.prototype.get_all_key_accounts = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var promises;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        promises = __spreadArray([], __read(new Set(Object.values(chainToEndpoint))), false).map(function (endpoint) {
                            var url = "".concat(endpoints_1.GET_KEY_ACCOUNTS, "/").concat(key);
                            return _this.get(url, endpoint);
                        });
                        return [4 /*yield*/, Promise.all(promises)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * [GET /api/key]
     *
     * Retrieve all accounts in network
     *
     * @param {string} key public key
     * @returns {Promise<GetKeyAccounts>} accounts
     */
    JsonRpc.prototype.get_key_accounts = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            var url;
            return __generator(this, function (_a) {
                url = "".concat(endpoints_1.GET_KEY_ACCOUNTS, "/").concat(key);
                return [2 /*return*/, this.get(url)];
            });
        });
    };
    /**
     * [GET /api/networks]
     *
     * Retrieve all accounts in all known EOS networks dependent on a public key:
     *
     * @returns {Promise<GetNetworks>} accounts
     */
    JsonRpc.prototype.get_networks = function () {
        return this.get(endpoints_1.GET_NETWORKS);
    };
    /**
     * [GET /api/sync]
     *
     * returns a plain text with delay in seconds that this server's blockchain database is behind the real time, and a status: OK if the delay is within 180 seconds, or 'OUT_OF_SYNC' otherwise.
     *
     * @returns {Promise<string>} get sync
     */
    JsonRpc.prototype.get_sync_info = function () {
        var url = "".concat(endpoints_1.GET_SYNC_INFO, "/").concat(this.chain);
        return this.get(url);
    };
    /**
     * [GET /api/tokenbalance]
     *
     *  returns a plain text with numeric output indicating the token balance. Zero is returned if the token is not present or does not exist.
     *
     * @param {string} account owner of token
     * @param {string} contract token contract
     * @param {string} token token symbol
     * @returns {Promise<string>} token balance
     */
    JsonRpc.prototype.get_token_balance = function (account, contract, token) {
        var url = "".concat(endpoints_1.GET_TOKEN_BALANCE, "/").concat(this.chain, "/").concat(account, "/").concat(contract, "/").concat(token);
        return this.get(url);
    };
    /**
     * [GET /api/topholders]
     *
     * returns top NUM holders of a specified token in a JSON array containing arrays of (account, amount) pairs. NUM must not be less than 10 or more than 1000.
     *
     * @param {string} contract token contract
     * @param {string} token token symbol
     * @param {string} num number of top holders (min 10, max 1000)
     *
     * @returns {Promise<string>} token balance
     */
    JsonRpc.prototype.get_topholders = function (contract, token, num) {
        var url = "".concat(endpoints_1.GET_TOPHOLDERS, "/").concat(this.chain, "/").concat(contract, "/").concat(token, "/").concat(num);
        return this.get(url);
    };
    /**
     * [GET /api/usercount]
     *
     * returns a plain text with total number of accounts in the network.
     *
     * @returns {Promise<string>} token balance
     */
    JsonRpc.prototype.get_usercount = function () {
        var url = "".concat(endpoints_1.GET_USERCOUNT, "/").concat(this.chain);
        return this.get(url);
    };
    /**
     * [GET /api/topram]
     *
     * returns top NUM RAM buyers in a JSON array containing arrays of (account, bytes) pairs. NUM must not be less than 10 or more than 1000.
     *
     * @param {string} num number of top holders (min 10, max 1000)
     *
     * @returns {Promise<GetTopRam>} top ram holders
     */
    JsonRpc.prototype.get_topram = function (num) {
        var url = "".concat(endpoints_1.GET_TOPRAM, "/").concat(this.chain, "/").concat(num);
        return this.get(url);
    };
    /**
     * [GET /api/topstake]
     *
     * returns top NUM RAM buyers in a JSON array containing arrays of (account, bytes) pairs. NUM must not be less than 10 or more than 1000.
     *
     * @param {string} num returns top NUM stake holders by sum of CPU and Net stakes, in a JSON array containing arrays of (account, cpu_weight, net_weight) tuples. NUM must not be less than 10 or more than 1000.
     *
     * @returns {Promise<GetTopStake>} top stake holders
     */
    JsonRpc.prototype.get_topstake = function (num) {
        var url = "".concat(endpoints_1.GET_TOPSTAKE, "/").concat(this.chain, "/").concat(num);
        return this.get(url);
    };
    /**
     * [GET /api/codehash]
     *
     * retrieves all accounts in all known EOS networks by contract hash.
     *
     * @param {string} num returns top NUM stake holders by sum of CPU and Net stakes, in a JSON array containing arrays of (account, cpu_weight, net_weight) tuples. NUM must not be less than 10 or more than 1000.
     *
     * @returns {Promise<GetCodehash>} accounts
     */
    JsonRpc.prototype.get_codehash = function (hash) {
        var url = "".concat(endpoints_1.GET_CODEHASH, "/").concat(hash);
        return this.get(url);
    };
    /**
     * [GET /api/holdercount]
     *
     * returns a plaintext integer indicating the number of accounts with positive balance for a specified token.
     *
     * @param {string} contract token contract
     * @param {string} token token symbol
     *
     * @returns {Promise<number>} count
     */
    JsonRpc.prototype.get_tokenholder_count = function (contract, token) {
        var url = "".concat(endpoints_1.GET_TOKEN_HOLDER_COUNT, "/").concat(this.chain, "/").concat(contract, "/").concat(token);
        return this.get(url);
    };
    /**
     * [WS get_token_holders]
     *
     * Get all token holders of a contract and symbol
     *
     * @param contract token contract
     * @param token token symbol
     * @returns
     */
    JsonRpc.prototype.get_token_holders = function (contract, token) {
        var _this = this;
        var reqId = ++this.wsRequestId;
        var balances = [];
        return new Promise(function (resolve, reject) {
            _this.wsClient.on('error', function (err) { return reject(err); });
            _this.wsClient.methods.set('reqdata', function (_, params) {
                if (params.end) {
                    resolve(balances);
                }
                balances.push({
                    account: params.data.account,
                    amount: +params.data.amount,
                });
            });
            try {
                _this.wsClient.call(endpoints_1.GET_TOKEN_HOLDERS, {
                    reqid: reqId,
                    network: _this.chain,
                    contract: contract,
                    currency: token,
                });
            }
            catch (err) {
                reject(err);
                return;
            }
        });
    };
    /**
     * [WS get_accounts_from_keys]
     *
     * Get all token holders of a contract and symbol
     *
     * @param keys[] array of keys
     * @returns
     */
    JsonRpc.prototype.get_accounts_from_keys = function (keys) {
        var _this = this;
        var reqId = ++this.wsRequestId;
        var accounts = [];
        return new Promise(function (resolve, reject) {
            _this.wsClient.on('error', function (err) { return reject(err); });
            _this.wsClient.methods.set('reqdata', function (_, params) {
                if (params.end) {
                    resolve(accounts);
                }
                accounts.push({
                    account_name: params.data.account_name,
                    perm: params.data.perm,
                    weight: +params.data.weight,
                    pubkey: params.data.pubkey,
                });
            });
            try {
                _this.wsClient.call(endpoints_1.GET_ACCOUNTS_FROM_KEYS, {
                    reqid: reqId,
                    network: _this.chain,
                    keys: keys,
                });
            }
            catch (err) {
                reject(err);
                return;
            }
        });
    };
    return JsonRpc;
}());
exports.JsonRpc = JsonRpc;
//# sourceMappingURL=jsonrpc.js.map